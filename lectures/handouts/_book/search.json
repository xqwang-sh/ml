[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "数据挖掘与机器学习",
    "section": "",
    "text": "本讲义将系统地介绍机器学习的基本概念、主要模型以及实践应用。\n引言:\n机器学习是人工智能的一个重要分支，它是指从数据中自动学习规律和模式，并利用这些规律和模式进行预测和决策的过程。机器学习在量化投资、金融科技等领域有广泛应用。由于课程时间有限，本讲义将重点介绍机器学习中的监督学习与无监督学习，以及其在金融预测中的应用。\n课程内容:\n\n机器学习基础\n金融数据获取与数据分析基础\n监督学习\n无监督学习\n\n使用说明:\n\n本讲义使用 Quarto 创建，可以方便地生成 HTML, PDF, ePub 等多种格式。\n点击左侧导航栏可以浏览不同章节的内容。\n\n希望本讲义能帮助您更好地学习和理解机器学习！",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>数据挖掘与机器学习课程讲义</span>"
    ]
  },
  {
    "objectID": "01_ml_basic.html",
    "href": "01_ml_basic.html",
    "title": "2  机器学习基础",
    "section": "",
    "text": "2.1 机器学习简介",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>机器学习基础</span>"
    ]
  },
  {
    "objectID": "01_ml_basic.html#机器学习简介",
    "href": "01_ml_basic.html#机器学习简介",
    "title": "2  机器学习基础",
    "section": "",
    "text": "2.1.1 什么是机器学习？\n机器学习是人工智能领域中一个非常热门且快速发展的分支。简单来说，机器学习就是让计算机通过学习数据，而不是依赖明确的编程指令，来完成特定的任务或解决问题。想象一下，我们教小孩子认识猫和狗，不是告诉他们猫和狗的具体特征（比如多少根胡须，耳朵的形状），而是给他们看大量的猫和狗的图片，告诉他们哪些是猫，哪些是狗。通过不断学习，孩子就能自己总结出猫和狗的区别，并且能够识别新的猫和狗。机器学习的原理与之类似，它使用算法来解析数据，从中学习，然后利用学到的知识对新数据做出预测或决策。\n\n\n2.1.2 机器学习的主要特点\n\n数据驱动: 机器学习模型的核心是数据。模型从数据中学习规律，数据越多、质量越高，模型通常就越强大。\n自动学习: 机器学习系统能够自动地从数据中发现模式和规律，无需人工明确指定规则。\n持续优化: 机器学习模型可以通过不断学习新的数据来提升性能，使其能够适应变化的环境。\n泛化能力: 训练好的模型不仅能处理训练数据，还能对未见过的新数据进行预测或决策。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>机器学习基础</span>"
    ]
  },
  {
    "objectID": "01_ml_basic.html#机器学习的主要类型",
    "href": "01_ml_basic.html#机器学习的主要类型",
    "title": "2  机器学习基础",
    "section": "2.2 机器学习的主要类型",
    "text": "2.2 机器学习的主要类型\n\n2.2.1 监督学习 (Supervised Learning)\n监督学习就像是有一位老师（监督者）指导计算机学习。我们提供给计算机带有”标签”的数据，标签就是我们希望模型预测的答案。例如，如果我们想让模型识别图片中的水果是苹果还是香蕉，我们就需要提供大量已经标记好（苹果或香蕉）的水果图片给模型学习。模型学习的目标就是找到输入数据（水果图片）和输出标签（苹果或香蕉）之间的关系。\n主要特点: * 需要使用带有标签的数据进行训练。 * 目标是学习输入特征与输出标签之间的映射关系。 * 主要解决分类和回归问题。分类问题是预测数据属于哪个类别（例如，垃圾邮件检测），回归问题是预测一个连续的数值（例如，房价预测）。\n现实生活案例: * 垃圾邮件检测: 通过分析邮件的内容（关键词、发件人等）来判断邮件是否为垃圾邮件。 * 图像识别: 识别图片中的物体，例如人脸识别、交通标志识别等。 * 语音识别: 将语音转换成文字。\n金融领域应用示例: * 信用评分: 根据用户的个人信息和交易记录预测其信用等级。 * 股票价格预测: 预测股票未来价格的涨跌趋势。 * 客户流失预测: 预测哪些客户可能在未来一段时间内停止使用某项金融服务。\n\n\n2.2.2 无监督学习 (Unsupervised Learning)\n无监督学习则像是让计算机在没有老师指导的情况下，自己去探索数据的内在结构和模式。我们提供给计算机的数据没有标签，模型需要自己去发现数据中的隐藏信息。例如，给计算机一大堆新闻报道，让它自己将这些新闻按照主题进行分类，这就是一个无监督学习的任务。\n主要特点: * 使用没有标签的数据进行学习。 * 目标是发现数据中的内在结构、模式或关系。 * 常用于聚类、降维和关联规则挖掘等任务。聚类是将相似的数据点 grouping 在一起，降维是在保留数据主要信息的同时减少数据的维度，关联规则挖掘是发现数据中不同项之间的关联关系。\n现实生活案例: * 客户分群: 根据用户的购买行为将用户分成不同的群体，以便进行个性化营销。 * 社交网络分析: 分析社交网络中用户之间的关系，发现社区结构或影响力中心。 * 异常检测: 在大量数据中找出异常或不正常的点，例如信用卡欺诈检测。\n金融领域应用示例: * 投资组合风险分析: 通过聚类分析将不同的投资资产进行分类，评估投资组合的风险。 * 市场细分: 将市场上的客户按照不同的特征进行细分，以便更好地了解市场需求。 * 交易异常检测: 检测金融市场中不正常的交易行为，例如内幕交易或市场操纵。\n\n\n2.2.3 强化学习 (Reinforcement Learning)\n强化学习更像是训练一只宠物。我们不直接告诉宠物应该做什么，而是通过奖励或惩罚来引导它学习。计算机作为一个”智能体”，在与环境的交互中不断尝试不同的动作。如果某个动作让它达到了目标（例如，在游戏中获得高分，或者在交易中获得盈利），我们就给予奖励；如果动作不好，就给予惩罚。通过不断地试错和学习，智能体最终学会如何在特定环境中做出最优的决策，以获得最大的累积奖励。\n主要特点: * 通过与环境的交互进行学习。 * 通过奖励和惩罚来指导学习方向。 * 目标是学习在特定环境中采取最优的行动策略，以最大化累积奖励。 * 适合解决序贯决策问题，即一系列连续决策的问题。\n现实生活案例: * 游戏AI: 训练AI玩游戏，例如围棋、象棋、电子游戏等。 * 机器人控制: 训练机器人完成各种任务，例如自动驾驶、物体抓取等。 * 推荐系统优化: 通过用户与推荐系统的交互（点击、购买等）来优化推荐策略。\n金融领域应用示例: * 自动化交易: 开发自动交易程序，根据市场情况自动进行买卖操作。 * 投资组合管理: 动态调整投资组合，以最大化收益并控制风险。 * 订单执行优化: 优化股票交易的订单执行策略，以降低交易成本。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>机器学习基础</span>"
    ]
  },
  {
    "objectID": "01_ml_basic.html#机器学习项目流程",
    "href": "01_ml_basic.html#机器学习项目流程",
    "title": "2  机器学习基础",
    "section": "2.3 机器学习项目流程",
    "text": "2.3 机器学习项目流程\n一个完整的机器学习项目通常包含以下几个关键步骤：\n\n数据收集与预处理:\n\n数据获取: 收集项目所需的数据。数据来源可能包括数据库、文件、网络爬虫、传感器等等。\n数据清洗: 处理数据中的缺失值、异常值、重复值和错误数据，确保数据质量。\n特征工程: 从原始数据中提取有用的特征，或者创建新的特征，以便模型更好地学习。特征工程是机器学习项目中非常重要的一步，好的特征能够显著提升模型性能。\n\n模型选择与训练:\n\n选择合适的算法: 根据问题的类型（分类、回归、聚类等）和数据的特点，选择合适的机器学习算法。例如，对于分类问题可以选择逻辑回归、支持向量机、决策树、随机森林等算法。\n划分数据集: 将数据集划分为训练集、验证集和测试集。训练集用于训练模型，验证集用于调整模型参数，测试集用于评估模型的泛化能力。\n模型训练与调参: 使用训练集数据训练模型，并使用验证集调整模型参数，例如超参数优化。目标是找到在验证集上表现最好的模型参数。\n\n模型评估与优化:\n\n性能评估: 使用测试集评估模型的性能。根据问题的类型选择合适的评估指标，例如准确率、精确率、召回率、F1 值（分类问题），均方误差、平均绝对误差（回归问题）等。\n模型调优: 如果模型性能不理想，需要进一步分析原因，并进行模型调优。调优方法可能包括：调整模型参数、尝试不同的算法、改进特征工程、增加数据量等。\n结果分析: 分析模型的预测结果，理解模型的优点和不足，为后续的模型改进提供方向。\n\n模型部署与监控:\n\n模型部署: 将训练好的模型部署到实际应用环境中。部署方式可能包括将模型集成到应用程序中、部署为 Web 服务等。\n性能监控: 在模型上线运行后，需要持续监控模型的性能。因为实际应用环境中的数据分布可能会发生变化（即”概念漂移”），导致模型性能下降。\n定期更新: 根据监控结果，定期使用新的数据重新训练模型，或者调整模型参数，以保持模型的性能和适应性。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>机器学习基础</span>"
    ]
  },
  {
    "objectID": "01_ml_basic.html#总结",
    "href": "01_ml_basic.html#总结",
    "title": "2  机器学习基础",
    "section": "2.4 总结",
    "text": "2.4 总结\n\n机器学习是一种强大的数据分析和预测工具，能够从数据中自动学习模式和规律。\n监督学习、无监督学习和强化学习是机器学习的三种主要类型，它们适用于不同的问题场景。\n机器学习在金融领域有着广泛的应用前景，可以用于风险管理、投资决策、客户服务等多个方面。\n成功应用机器学习需要一个完整的项目流程，包括数据准备、模型构建、评估优化和部署监控等环节。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>机器学习基础</span>"
    ]
  },
  {
    "objectID": "01_ml_basic.html#练习",
    "href": "01_ml_basic.html#练习",
    "title": "2  机器学习基础",
    "section": "2.5 练习",
    "text": "2.5 练习\n\n思考一个你感兴趣的金融领域问题，分析它适合使用哪种类型的机器学习方法，并解释原因。\n在日常生活中，你还能想到哪些可以使用机器学习解决的问题？请举例说明，并分析适合使用哪种类型的机器学习方法。\n查阅资料，探索更多机器学习在金融领域的实际应用案例，并思考这些应用如何改变金融行业。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>机器学习基础</span>"
    ]
  },
  {
    "objectID": "lab02_data.html",
    "href": "lab02_data.html",
    "title": "3  金融数据获取与数据分析基础",
    "section": "",
    "text": "3.1 内容概要",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>金融数据获取与数据分析基础</span>"
    ]
  },
  {
    "objectID": "lab02_data.html#内容概要",
    "href": "lab02_data.html#内容概要",
    "title": "3  金融数据获取与数据分析基础",
    "section": "",
    "text": "金融数据获取\n\n股票、债券、期货市场数据\n数据接口 (Tushare, Yahoo Finance)\n上市公司财务报表数据\n金融文本数据\n\nPython数据分析基础\n\nNumPy, Pandas 常用功能\n数据预处理与清洗\n探索性数据分析 (EDA)\n\nAI辅助编程实践\n\n代码生成、解释、优化\n最佳实践案例",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>金融数据获取与数据分析基础</span>"
    ]
  },
  {
    "objectID": "lab02_data.html#金融数据获取",
    "href": "lab02_data.html#金融数据获取",
    "title": "3  金融数据获取与数据分析基础",
    "section": "3.2 金融数据获取",
    "text": "3.2 金融数据获取\n\n3.2.1 股票市场数据\n\n数据类型：\n\n基本行情数据：股票代码、名称、交易所、行业\n交易数据：开盘价、收盘价、最高价、最低价、成交量、成交额\n财务数据：资产负债表、利润表、现金流量表、财务指标 (ROE, EPS, PE)\n股东信息：股东户数、十大股东\n分红送股：分红金额、送股比例\n\n常用数据源：\n\nTushare (tushare.pro): 国内股票数据接口，数据全面，API友好 (稍后详细介绍)\nYahoo Finance (finance.yahoo.com): 全球股票数据，免费API (yfinance Python库)\n交易所官方API: 上海证券交易所 (sse.com.cn), 深圳证券交易所 (szse.cn) - 数据权威，但API可能较为复杂\n券商API: 部分券商提供API接口，方便交易和数据获取 (例如：同花顺, 东方财富)\nWind (wind.com.cn), Bloomberg (bloomberg.com): 专业金融数据服务商，数据质量高，但价格昂贵 (机构常用)\n\n\n\n\n3.2.2 债券市场数据\n\n数据类型：\n\n债券基本信息：债券代码、名称、发行人、债券类型、票面利率、到期日\n债券交易数据：成交价、收益率、成交量\n债券估值数据：中债估值、市场估值\n债券评级：评级机构、评级结果\n债券发行数据：发行规模、发行利率\n\n常用数据源：\n\nWind (wind.com.cn), Bloomberg (bloomberg.com): 专业金融数据服务商\n中债网 (chinabond.com.cn): 中国债券信息网，官方数据\n交易所债券信息平台: 上海证券交易所债券信息平台, 深圳证券交易所债券信息平台\n券商研究报告: 部分券商研报会提供债券市场数据和分析\n\n\n\n\n3.2.3 期货市场数据\n\n数据类型：\n\n期货合约信息：合约代码、标的资产、交易单位、最小变动价位、交割月份\n期货交易数据：开盘价、收盘价、最高价、最低价、成交量、持仓量\n期货指数数据：商品期货指数、股指期货指数\n期货仓单数据：仓单数量、注册仓单、有效预报\n期货持仓排名：期货交易所公布的持仓排名数据\n\n常用数据源：\n\nCTP接口: 期货公司提供的交易接口，可以获取实时行情和历史数据 (专业交易者常用)\n同花顺, 文华财经: 金融软件，提供期货行情和数据\n期货交易所网站: 各期货交易所 (例如：上海期货交易所, 大连商品交易所, 郑州商品交易所) 网站通常提供数据下载\nWind (wind.com.cn), Bloomberg (bloomberg.com): 专业金融数据服务商\n\n\n\n\n3.2.4 数据接口使用：Tushare\n\nTushare Pro (tushare.pro): 注册认证后可获取更丰富的数据和更高的API访问权限 (收费)\n安装: pip install tushare\n初始化: 需要token (注册Tushare Pro后获取)\nimport tushare as ts\n\n# 初始化 pro 接口\npro = ts.pro_api('YOUR_TOKEN') # 替换为你的token\n常用API示例：\n\n获取股票列表: pro.stock_basic()\n获取股票日线行情: ts.get_k_data('600519', start='2023-01-01', end='2023-01-31') (旧接口) 或 pro.daily(ts_code='600519.SH', start_date='20230101', end_date='20230131') (Pro接口)\n获取公司财务报表: pro.fina_indicator(ts_code='600519.SH', period='20221231')\n更多API: 参考 Tushare 官方文档 (https://tushare.pro/document/2)\n\n注意事项:\n\nAPI访问频率限制: 免费用户有访问频率限制，避免频繁调用\n数据权限: 不同级别用户权限不同，部分数据需要Pro会员\n数据质量: 注意核对数据质量，不同接口数据可能存在差异\n\n\n\n\n3.2.5 数据接口使用：Yahoo Finance\n\nyfinance 库主要用于获取海外股票数据，国内A股数据质量可能不如 Tushare 等国内接口，因此本课程示例主要使用 Tushare 获取A股数据。 Yahoo Finance 示例如下，如果需要分析海外股票，可以使用 yfinance。\nimport yfinance as yf\n\n# 下载 苹果 (AAPL) 股票数据\naapl = yf.Ticker(\"AAPL\")\n\n# 获取历史数据\nhist = aapl.history(period=\"5y\") # 5年历史数据\nprint(hist.head())\n\n# 获取公司信息\ninfo = aapl.info\nprint(info)\n\n# 获取分红信息\ndividends = aapl.dividends\nprint(dividends)\n\n# 更多功能参考 yfinance 文档\n优点: 免费，全球股票数据，使用简单 (如果分析海外股票)\n缺点: A 股数据质量可能不如国内专业数据源，API 稳定性可能不如官方接口，文档相对简单，A 股代码可能需要调整\n\n\n\n3.2.6 上市公司财务报表数据\n\n数据类型:\n\n资产负债表: 反映公司在特定时点的资产、负债和所有者权益状况\n利润表: 反映公司在特定期间的经营成果 (收入、成本、利润)\n现金流量表: 反映公司在特定期间的现金流入和流出\n财务指标: 根据财务报表计算的各种指标，例如：盈利能力指标 (ROE, ROA, 净利润率), 偿债能力指标 (资产负债率, 流动比率), 运营能力指标 (存货周转率, 应收账款周转率), 成长能力指标 (营业收入增长率, 净利润增长率)\n\n数据来源:\n\nCSMAR (csmar.com): 国泰安，国内权威的金融数据库，数据质量高，但收费，高校和研究机构常用\nCNRDS (cnrds.com): 中国研究数据服务平台，国内较全面的研究数据平台，数据覆盖范围广，部分数据收费，学术研究常用\nWind (wind.com.cn): 专业金融数据服务商，提供全面的财务报表和财务指标数据，收费昂贵，金融机构常用\n巨潮资讯网 (cninfo.com.cn): 免费的上市公司公告平台，包含上市公司定期报告 (年报、季报)，可以从中获取财务报表数据，但需要自行解析和整理",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>金融数据获取与数据分析基础</span>"
    ]
  },
  {
    "objectID": "lab02_data.html#python数据分析基础",
    "href": "lab02_data.html#python数据分析基础",
    "title": "3  金融数据获取与数据分析基础",
    "section": "3.3 Python数据分析基础",
    "text": "3.3 Python数据分析基础\n\n3.3.1 NumPy 基础\n\nNumPy: 基于Python的科学计算库，提供高效的多维数组对象和工具，用于数据分析和科学计算\n核心功能:\n\n数组操作: 创建、操作、转换数组\n数学运算: 线性代数、傅里叶变换、随机数生成\n数据IO: 读取和写入各种数据格式 (CSV, Excel, SQL, JSON, HTML)\n\n常用操作:\nimport numpy as np\nimport pandas as pd\n\n# 假设您已下载 茅台 (600519.SH) 近5日收盘价数据到 moutai_daily.csv\n# CSV 文件包含 Date 和 Close 列\nmoutai_daily_df = pd.read_csv('moutai_daily.csv')\nclose_prices = moutai_daily_df['Close'].values\n\n# 计算平均收盘价\navg_price = np.mean(close_prices)\nprint(f\"平均收盘价: {avg_price:.2f}\")\n\n# 计算收盘价的标准差\nstd_price = np.std(close_prices)\nprint(f\"收盘价标准差: {std_price:.2f}\")\n\n# 计算每日涨跌幅 (假设前一日收盘价在 CSV 中也存在)\nprevious_close_prices = moutai_daily_df['Close'].shift(1).fillna(method='bfill').values #  向前填充第一个缺失值\nprice_change_ratio = (close_prices[1:] - previous_close_prices[1:]) / previous_close_prices[1:]\nprint(f\"每日涨跌幅: {price_change_ratio}\")\n\n\n\n3.3.2 2.2 Pandas 基础\n\nPandas (Panel Data): 基于NumPy的数据分析库，提供 Series (一维带标签数组) 和 DataFrame (二维表格型数据) 数据结构\n核心功能:\n\n数据结构: Series 和 DataFrame，方便数据表示和操作\n数据清洗: 处理缺失值、重复值、异常值\n数据预处理: 数据转换、数据标准化、特征工程\n数据分析: 数据选择、过滤、排序、分组聚合、透视表\n数据IO: 读取和写入各种数据格式 (CSV, Excel, SQL, JSON, HTML)\n\n实践示例: 茅台股票数据分析:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tushare as ts\n\n# 设置Tushare token\nts.set_token('你的token')\npro = ts.pro_api()\n\n# 获取茅台股票数据（最近60个交易日）\ndf = pro.daily(ts_code='600519.SH', \n              start_date='20240101',\n              end_date='20240331')\n\n# 基础数据处理\ndf['trade_date'] = pd.to_datetime(df['trade_date'])  # 转换日期格式\ndf = df.sort_values('trade_date')  # 按日期排序\n\n# 计算基本指标\ndf['daily_return'] = df['close'].pct_change()  # 日收益率\ndf['MA5'] = df['close'].rolling(window=5).mean()  # 5日均线\ndf['MA20'] = df['close'].rolling(window=20).mean()  # 20日均线\ndf['volatility'] = df['daily_return'].rolling(window=20).std() * np.sqrt(252)  # 20日年化波动率\n\n# 数据分析示例\nprint(\"\\n基本统计信息:\")\nprint(df[['close', 'daily_return', 'volatility']].describe())\n\nprint(\"\\n交易量最大的5天:\")\nprint(df.nlargest(5, 'vol')[['trade_date', 'close', 'vol']])\n\n# 计算每周平均收盘价和成交量\nweekly_stats = df.set_index('trade_date').resample('W').agg({\n    'close': 'mean',\n    'vol': 'sum'\n})\nprint(\"\\n每周统计:\")\nprint(weekly_stats.head())\n\n# 可视化分析\nplt.figure(figsize=(15, 10))\n\n# 绘制K线图和均线\nplt.subplot(2, 1, 1)\nplt.plot(df['trade_date'], df['close'], label='收盘价')\nplt.plot(df['trade_date'], df['MA5'], label='5日均线')\nplt.plot(df['trade_date'], df['MA20'], label='20日均线')\nplt.title('贵州茅台股价走势')\nplt.legend()\nplt.grid(True)\n\n# 绘制成交量和波动率\nplt.subplot(2, 1, 2)\nplt.bar(df['trade_date'], df['vol'], alpha=0.5, label='成交量')\nplt.plot(df['trade_date'], df['volatility'] * 1000000, 'r', label='波动率(放大1000000倍)')\nplt.title('成交量和波动率')\nplt.legend()\nplt.grid(True)\n\nplt.tight_layout()\nplt.show()\n练习建议:\n\n尝试修改上述代码，计算不同时间窗口的均线（如10日、30日均线）\n添加其他技术指标的计算（如RSI、MACD）\n尝试对比茅台与其他白酒股的表现\n探索不同的可视化方式（如蜡烛图）\n\n\n\n\n3.3.3 数据预处理与清洗\n\n数据质量问题:\n\n缺失值 (Missing Values): 数据记录中某些字段为空 (例如：股票停牌日可能成交量为缺失值)\n异常值 (Outliers): 与其他数据明显偏离的值 (例如：交易数据中的错误记录)\n重复值 (Duplicates): 重复的数据记录\n数据不一致 (Inconsistent Data): 同一信息在不同数据源中表示不一致\n数据类型错误 (Data Type Errors): 例如：数值型字段存储为字符串\n\n数据预处理步骤:\n\n数据清洗 (Data Cleaning): 处理缺失值、异常值、重复值、数据不一致等\n数据转换 (Data Transformation): 数据类型转换、数据格式转换、数据编码 (例如：One-Hot Encoding)\n数据标准化/归一化 (Data Scaling/Normalization): 将数据缩放到特定范围，消除量纲影响 (例如：Min-Max Scaling, Standardization)\n特征选择/特征构建 (Feature Selection/Feature Engineering): 选择重要特征，构建新特征 (后续章节详细介绍)\n\n\n\n\n3.3.4 探索性数据分析 (EDA)\n\n目的: 初步了解数据特征、发现数据规律、为后续建模提供方向\n常用方法:\n\n描述性统计: 均值、中位数、标准差、分位数、最大值、最小值等，了解数据分布和集中趋势 (例如：分析股票收盘价的统计特征)\n数据可视化: 直方图、箱线图、散点图、折线图、热力图等，直观展示数据分布、关系和异常 (例如：绘制股票价格走势图、成交量直方图)\n相关性分析: 计算特征之间的相关性，了解特征之间的关系 (例如：分析股票收益率与成交量之间的相关性)\n分组分析: 按类别分组，比较不同组别的数据特征差异 (例如：按行业分组，比较不同行业股票的盈利能力)\n\n常用可视化工具:\n\nMatplotlib: Python 基础绘图库，功能强大，定制性强\nSeaborn: 基于Matplotlib的高级可视化库，更美观，更方便绘制统计图表\nPlotly: 交互式可视化库，可创建动态图表",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>金融数据获取与数据分析基础</span>"
    ]
  },
  {
    "objectID": "lab02_data.html#ai-辅助编程实践",
    "href": "lab02_data.html#ai-辅助编程实践",
    "title": "3  金融数据获取与数据分析基础",
    "section": "3.4 AI 辅助编程实践",
    "text": "3.4 AI 辅助编程实践\n\n3.4.1 代码生成与解释\n\nAI 代码生成工具: Cursor, GitHub Copilot 等\n代码生成: 使用 Ctrl+K (或 Cmd+K) 快捷键，根据自然语言描述或代码上下文，自动生成代码片段或完整函数。 例如，在注释中输入 “用 Tushare 获取贵州茅台 (600519.SH) 2023年至今的日线数据”，AI 可以自动生成相应的 Python 代码。\n代码解释: 使用 Ctrl+L (或 Cmd+L) 快捷键，AI 工具可以解释选定代码的功能和逻辑，帮助理解代码。 例如，选中一段复杂的 Pandas 股票数据处理代码，使用 Ctrl+L 可以快速了解代码的功能。\n\n\n\n3.4.2 代码优化与调试\n\nAI 代码优化: AI 工具可以分析代码，提供性能优化建议，例如：\n\n代码效率优化: 改进算法、减少循环、使用向量化运算 (例如：优化股票数据批量处理循环)。 可以使用 Ctrl+I (或 Cmd+I) 快捷键，请求 AI 检查代码并给出优化建议。\n代码可读性优化: 代码格式化、变量命名建议、代码重构建议。 Ctrl+I 同样可以用于代码可读性优化。\n\nAI 代码调试: AI 工具可以辅助代码调试，例如：\n\n错误检测: 静态代码分析，检测潜在错误 (例如：检查股票数据处理代码中是否存在数据类型错误)。 某些 AI 工具可以在编写代码时实时检测错误。\nBug 定位: 根据错误信息和代码上下文，帮助定位 Bug。 AI 可以分析错误堆栈信息，并结合代码逻辑，给出可能的 Bug 位置和修复建议。\n智能提示: 提供代码补全、参数提示、错误提示，减少编码错误。\n\n\n\n\n3.4.3 最佳实践案例\n\n案例 1: 生成基础数据分析代码\n\n场景: 需要生成一段完整的代码，用于获取茅台股票数据并进行基本分析。\n操作: 在代码编辑器中输入以下注释，然后按下 Ctrl+K: python     # 使用tushare获取贵州茅台(600519.SH)最近30天的日线数据     # 计算日收益率、5日均线、20日均线     # 使用matplotlib绘制K线图，并在图上显示均线\n预期生成代码:\nimport tushare as ts\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# 初始化tushare\nts.set_token('你的token')\npro = ts.pro_api()\n\n# 获取数据\nend_date = pd.Timestamp.today().strftime('%Y%m%d')\nstart_date = (pd.Timestamp.today() - pd.Timedelta(days=30)).strftime('%Y%m%d')\ndf = pro.daily(ts_code='600519.SH', start_date=start_date, end_date=end_date)\ndf['trade_date'] = pd.to_datetime(df['trade_date'])\ndf = df.sort_values('trade_date')\n\n# 计算指标\ndf['daily_return'] = df['close'].pct_change()\ndf['MA5'] = df['close'].rolling(window=5).mean()\ndf['MA20'] = df['close'].rolling(window=20).mean()\n\n# 绘图\nplt.figure(figsize=(12, 6))\nplt.plot(df['trade_date'], df['close'], label='收盘价')\nplt.plot(df['trade_date'], df['MA5'], label='5日均线')\nplt.plot(df['trade_date'], df['MA20'], label='20日均线')\nplt.title('贵州茅台股价走势')\nplt.xlabel('日期')\nplt.ylabel('价格')\nplt.legend()\nplt.grid(True)\nplt.show()\n\n案例 2: 生成技术分析代码\n\n场景: 通过解释MACD指标的计算原理，生成更复杂的技术分析代码。\n操作: 输入以下注释，然后按下 Ctrl+L: python     # 请解释MACD指标的计算原理，并生成一个完整的函数来计算茅台股票的MACD指标     # 需要包含：     # 1. MACD的计算（快线、慢线、柱状图）     # 2. 买卖信号判断     # 3. 结果可视化\n预期生成代码:\ndef analyze_macd(stock_data, short_window=12, long_window=26, signal_window=9):\n    \"\"\"\n    计算并可视化MACD指标\n    - DIF(MACD线): 快速EMA与慢速EMA的差\n    - DEA(信号线): DIF的移动平均\n    - MACD柱: DIF与DEA的差值\n    \"\"\"\n    # 计算MACD\n    exp1 = stock_data['close'].ewm(span=short_window, adjust=False).mean()\n    exp2 = stock_data['close'].ewm(span=long_window, adjust=False).mean()\n    stock_data['DIF'] = exp1 - exp2\n    stock_data['DEA'] = stock_data['DIF'].ewm(span=signal_window, adjust=False).mean()\n    stock_data['MACD'] = 2 * (stock_data['DIF'] - stock_data['DEA'])\n\n    # 生成买卖信号\n    stock_data['SIGNAL'] = 0\n    stock_data.loc[stock_data['DIF'] &gt; stock_data['DEA'], 'SIGNAL'] = 1\n    stock_data.loc[stock_data['DIF'] &lt; stock_data['DEA'], 'SIGNAL'] = -1\n\n    # 可视化\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8), sharex=True)\n\n    # 绘制股价\n    ax1.plot(stock_data['trade_date'], stock_data['close'])\n    ax1.set_title('茅台股价与MACD信号')\n    ax1.grid(True)\n\n    # 绘制MACD\n    ax2.plot(stock_data['trade_date'], stock_data['DIF'], label='DIF')\n    ax2.plot(stock_data['trade_date'], stock_data['DEA'], label='DEA')\n    ax2.bar(stock_data['trade_date'], stock_data['MACD'], label='MACD柱')\n    ax2.grid(True)\n    ax2.legend()\n\n    plt.tight_layout()\n    plt.show()\n\n    return stock_data\n\n# 调用函数\ndf = analyze_macd(df)\n\n案例 3: 生成性能优化代码\n\n场景: 优化股票数据分析代码，生成更高效的实现。\n操作: 输入以下注释和代码，然后按下 Ctrl+I:\n# 请优化以下计算波动率的代码，使用向量化操作提高性能\n# 需要：\n# 1. 使用pandas的向量化操作\n# 2. 添加并行计算支持\n# 3. 增加性能监控\n\ndef calculate_volatility(close_prices):\n    volatility = []\n    for i in range(len(close_prices)-20):\n        window = close_prices[i:i+20]\n        daily_returns = []\n        for j in range(1, len(window)):\n            daily_return = (window[j] - window[j-1]) / window[j-1]\n            daily_returns.append(daily_return)\n        vol = np.std(daily_returns) * np.sqrt(252)\n        volatility.append(vol)\n    return volatility\n预期生成代码:\nimport time\nfrom concurrent.futures import ThreadPoolExecutor\n\ndef calculate_volatility_optimized(close_prices):\n    \"\"\"\n    优化后的波动率计算函数\n    - 使用pandas的向量化操作\n    - 支持并行计算\n    - 包含性能监控\n    \"\"\"\n    start_time = time.time()\n\n    # 计算日收益率（向量化操作）\n    returns = pd.Series(close_prices).pct_change().dropna()\n\n    # 使用rolling计算滚动波动率\n    volatility = returns.rolling(window=20).std() * np.sqrt(252)\n\n    # 并行计算示例（处理多个股票时使用）\n    def parallel_volatility(stock_returns):\n        return stock_returns.rolling(window=20).std() * np.sqrt(252)\n\n    with ThreadPoolExecutor() as executor:\n        # 这里可以处理多个股票的数据\n        results = list(executor.map(parallel_volatility, [returns]))\n\n    end_time = time.time()\n    print(f\"计算耗时: {end_time - start_time:.4f} 秒\")\n\n    return volatility\n\n# 性能对比\nprices = df['close'].values\n\n# 测试原始版本\nstart = time.time()\nvol1 = calculate_volatility(prices)\nprint(f\"原始版本耗时: {time.time() - start:.4f} 秒\")\n\n# 测试优化版本\nstart = time.time()\nvol2 = calculate_volatility_optimized(prices)\nprint(f\"优化版本耗时: {time.time() - start:.4f} 秒\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>金融数据获取与数据分析基础</span>"
    ]
  },
  {
    "objectID": "lab02_data.html#总结",
    "href": "lab02_data.html#总结",
    "title": "3  金融数据获取与数据分析基础",
    "section": "3.5 总结",
    "text": "3.5 总结\n\n数据是机器学习的基石：高质量的数据是构建有效模型的关键。\n金融数据获取多样化：掌握不同数据源和API接口，灵活获取所需数据，包括股票、债券、期货、财务报表和金融文本数据。\nPython 数据分析是必备技能：熟练运用 NumPy 和 Pandas 进行金融数据处理和分析。\nEDA 帮助理解数据：通过探索性数据分析，发现金融数据规律，为建模提供方向。\nAI 辅助编程提升效率：善用 AI 工具，提高金融数据获取和分析效率。 熟练使用AI工具，可以显著提升开发效率。",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>金融数据获取与数据分析基础</span>"
    ]
  }
]