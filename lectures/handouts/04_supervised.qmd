---
title: "监督学习（下）"
---

## 集成学习 (Ensemble Learning)

集成学习 (Ensemble Learning) 是一种**将多个弱学习器 (Weak Learner) 组合成一个强学习器 (Strong Learner) 的技术**。 弱学习器通常指**预测性能略优于随机猜测的模型**，例如**单层决策树**、**简单的线性模型**等。集成学习的核心思想是 **"集思广益"**，即通过**组合多个弱学习器的预测结果**，来获得比单个强学习器**更全面、更鲁棒的预测能力**。

集成学习模型通常具有比单个学习器**更好的预测性能和泛化能力**。 这是因为集成学习可以通过以下方式**降低模型的误差**：

- **降低方差 (Variance Reduction)**：Bagging 等方法通过**并行训练多个基学习器**，并**对它们的预测结果进行平均或投票**，可以有效**降低模型的方差**，提高模型的稳定性。
- **降低偏差 (Bias Reduction)**：Boosting 等方法通过**串行训练多个基学习器**，**每个基学习器都试图纠正前一个基学习器的错误**，可以有效**降低模型的偏差**，提高模型的预测精度。
- **提高鲁棒性 (Robustness Improvement)**：集成学习模型通常**不易过拟合**，对**异常值和噪声数据**具有**更强的鲁棒性**。

集成学习的核心思想是 **"三个臭皮匠，顶个诸葛亮"**，即通过**集体智慧**来提高模型的性能。常用的集成学习方法包括 **Bagging (Bootstrap Aggregating)**、**Boosting (提升法)** 和 **Stacking (堆叠法)**。

### Bagging (Bootstrap Aggregating)

Bagging (Bootstrap Aggregating)，也称为**自助采样聚合**，是一种基于 **自助采样 (Bootstrap Sampling)** 的集成学习方法。Bagging 的核心思想是 **并行集成**，即**同时训练多个独立的基学习器**，然后通过**投票 (Voting)** 或 **平均 (Averaging)** 的方式将它们的预测结果集成起来。Bagging 可以有效**降低模型的方差 (Variance)**，提高模型的稳定性和泛化能力，尤其适用于**容易过拟合**的基学习器，如决策树、神经网络等。

**自助采样 (Bootstrap Sampling) 的直观解释:**

想象一下，你有一个装满弹珠的罐子（代表原始数据集），你想估计罐子里弹珠颜色的分布。自助采样就像是：

1. **有放回地从罐子里随机抽取一些弹珠**，记录它们的颜色，然后**放回罐子**。
2. **重复步骤 1 多次**，每次抽取都形成一个新的弹珠样本集（子数据集）。

由于是**有放回的抽样**，每次抽取的子数据集都**可能包含重复的弹珠**，也**可能缺少原始数据集中的某些弹珠**。但从整体上看，**每个子数据集都近似地代表了原始数据集的分布**。

**Bagging 降低方差的原理:**

Bagging 通过**自助采样**创建多个略有不同的训练数据集，并在**每个数据集上独立训练一个基学习器**。由于**每个基学习器都是在不同的数据集上训练的**，它们之间具有一定的**差异性**。当**对多个基学习器的预测结果进行平均或投票时**，可以**有效地平滑掉单个基学习器预测结果中的随机波动**，从而**降低整体模型的方差**。

**算法流程:**

1. **自助采样 (Bootstrap Sampling)**：从原始数据集 $D$ 中**有放回地随机抽取** $N$ 个样本，构建一个**子数据集 $D_t$**，也称为 **自助样本集 (Bootstrap Sample)**。重复 $T$ 次，得到 $T$ 个**独立的子数据集** $\{D_1, D_2, ..., D_T\}$。每个子数据集的大小与原始数据集相同，但样本分布略有不同。由于是有放回抽样，因此每个子数据集中可能包含重复样本，也可能缺少原始数据集中的某些样本。一般来说，每个子数据集大约包含原始数据集 63.2% 的样本。
2. **训练基学习器 (Base Learner)**：在**每个子数据集 $D_t$ 上独立地训练一个基学习器 $h_t$**。基学习器可以是同质的（例如，都使用决策树），也可以是异质的（例如，使用决策树、神经网络、SVM 等不同的模型）。常用的基学习器是决策树，此时的 Bagging 集成学习方法就是 **随机森林 (Random Forest)**。
3. **集成预测 (Ensemble Prediction)**：对于**分类问题**，Bagging 通常使用 **投票法 (Voting)** 进行预测，即**将 $T$ 个基学习器预测结果中出现次数最多的类别作为最终预测结果**。对于**回归问题**，Bagging 通常使用 **平均法 (Averaging)** 进行预测，即**将 $T$ 个基学习器预测结果的平均值作为最终预测结果**。

**随机森林 (Random Forest):**

随机森林 (Random Forest, RF) 是一种非常流行且强大的 **基于 Bagging 思想的集成学习模型**，以 **决策树 (Decision Tree)** 为基学习器。随机森林在 Bagging 的基础上，进一步引入了 **特征随机选择 (Random Feature Selection)**，使得基学习器之间具有**更高的差异性 (Diversity)**，从而进一步提高集成的性能。随机森林具有**高精度**、**高效率**、**鲁棒性强**、**不易过拟合**等优点，被广泛应用于分类、回归和特征重要性评估等任务。

**特征随机选择 (Random Feature Selection) 的直观解释:**

在构建决策树时，传统的决策树会在**所有特征中选择最优特征**进行节点分裂。而特征随机选择则是在**每个节点分裂时**，**先随机选择一部分特征**，然后**只在这部分特征中选择最优特征**。

**特征随机选择提高模型性能的原理:**

特征随机选择**进一步增加了基学习器之间的差异性**。由于**每个决策树只使用一部分随机选择的特征进行训练**，即使在相同的子数据集上训练，**不同的决策树也会学习到不同的特征子集**，从而**降低基学习器之间的相关性**，提高集成的效果。 此外，特征随机选择还有助于**降低模型的过拟合风险**，并**提高模型的泛化能力**。

**随机森林的构建过程:**

1. **自助采样 (Bootstrap Sampling)**：与 Bagging 相同，从原始数据集 $D$ 中有放回地随机抽取 $N$ 个样本，构建 $T$ 个子数据集 $\{D_1, D_2, ..., D_T\}$。
2. **训练基学习器 (决策树)**：在**每个子数据集 $D_t$ 上训练一个决策树 $h_t$**。与传统的决策树不同，随机森林在训练决策树的过程中，**引入了特征随机选择**。具体来说，在决策树的**每个节点分裂时**，**不是从所有特征中选择最优特征**，而是先**随机选择 $m$ 个特征构成一个特征子集**（通常 $m << K$，例如 $m = \sqrt{K}$），然后**从这个特征子集中选择最优特征进行分裂**。这里的 $m$ 是一个**超参数**，需要预先设定。特征随机选择进一步增加了基学习器之间的差异性，使得随机森林的集成效果更好。
3. **集成预测 (Ensemble Prediction)**：与 Bagging 相同，对于分类问题使用投票法，对于回归问题使用平均法。

**随机森林的特点:**

- **高精度**：随机森林通常比单个决策树具有更高的预测精度。
- **鲁棒性强**：随机森林对异常值和噪声数据具有较好的鲁棒性。
- **不易过拟合**：随机森林通过 Bagging 和特征随机选择，有效降低了模型的方差，不易过拟合。
- **泛化能力强**：随机森林具有较强的泛化能力，在测试集上表现良好。
- **可处理高维数据**：随机森林可以处理高维数据，无需进行特征选择。
- **可评估特征重要性**：随机森林可以评估每个特征在模型中的重要性，用于特征选择和特征理解。
- **实现简单，易于并行化**：随机森林的构建过程简单高效，基学习器之间相互独立，易于并行化处理，训练速度快。

### Boosting (提升法)

Boosting (提升法) 是一种与 Bagging 不同的集成学习方法。Boosting 的核心思想是 **串行集成**，即**迭代地训练一系列的基学习器**，**每个基学习器都试图纠正前一个基学习器的错误**。Boosting 方法通过**加权样本**或**调整预测结果**的方式，**逐步提升模型的性能**。Boosting 方法可以有效**降低模型的偏差 (Bias) 和方差**，得到**高精度**的集成模型，尤其适用于**弱学习器**，如**浅层决策树 (Decision Stump)**。常用的 Boosting 算法包括 **AdaBoost (Adaptive Boosting)**、**GBDT (Gradient Boosting Decision Tree)**、**XGBoost (Extreme Gradient Boosting)**、**LightGBM (Light Gradient Boosting Machine)**、**CatBoost (Categorical Boosting)** 等。

**Boosting 的串行集成思想的直观解释:**

Boosting 就像是**一个团队合作解决问题**的过程，其中：

1. **第一个弱学习器先尝试解决问题**，但可能做得不够好，会犯一些错误。
2. **后续的弱学习器会仔细研究第一个学习器犯的错误**，并**针对这些错误进行改进**，**尝试纠正之前的错误**。
3. **每个弱学习器都在前一个学习器的基础上进行提升**，**逐步提高整体的预测能力**。

**Boosting 迭代提升模型性能的原理:**

Boosting 方法通过**迭代训练**，**每一轮迭代都关注前一轮模型预测错误的样本**，并**调整样本权重或模型权重**，使得**后续的模型更加关注难以分类或预测的样本**。 这样**不断地迭代和调整**，**逐步将弱学习器提升为强学习器**，最终得到一个**高精度、高性能的集成模型**。

**AdaBoost (Adaptive Boosting):**

AdaBoost (Adaptive Boosting, 自适应提升) 是一种经典的 **Boosting 算法**。AdaBoost 的核心思想是 **"关注错误样本"** 和 **"加权基学习器"**。AdaBoost 通过**迭代地训练基学习器**，**每轮迭代都更加关注前一轮基学习器预测错误的样本**，**提高错误样本的权重**，**降低正确样本的权重**，使得后续的基学习器更加关注难以分类的样本。同时，AdaBoost **为每个基学习器赋予一个权重**，**预测性能好的基学习器权重较高**，**预测性能差的基学习器权重较低**。最终模型是**所有基学习器的加权线性组合**。AdaBoost 算法主要用于**二分类问题**。

**"关注错误样本" 和 "加权基学习器" 的直观解释:**

- **关注错误样本**：在每一轮迭代中，AdaBoost 会**提高上一轮分类错误的样本的权重**，使得**后续的基学习器更加关注这些难分样本**，努力将它们分类正确。 这就像老师在辅导学生时，会**更加关注那些经常犯错的学生**，帮助他们改正错误，提高学习成绩。
- **加权基学习器**：AdaBoost 会**根据每个基学习器的预测性能**，**赋予不同的权重**。**预测性能好的基学习器**，例如错误率低的基学习器，会被赋予**更高的权重**，在最终的预测中起**更大的作用**。 这就像专家团队中，**更信任那些经验丰富、能力强的专家**的意见。

**AdaBoost 算法流程 (二分类):**

1. **初始化样本权重 (Initialize Sample Weights)**：为**每个样本赋予相同的初始权重** $w_{1i} = 1/N, i = 1, 2, ..., N$。初始时，所有样本的权重相同，表示所有样本同等重要。
2. **迭代训练基学习器 (Iterative Training of Base Learners)**：进行 $T$ 轮迭代， $t = 1, 2, ..., T$：
   a. **训练基学习器 (Train Base Learner)**：使用**带有样本权重的训练数据集** $\{( \mathbf{x}_i, y_i, w_{ti} )\}_{i=1}^{N}$ 训练一个基学习器 $h_t(\mathbf{x})$。在第 $t$ 轮迭代中，基学习器 $h_t$ 基于样本权重 $w_{ti}$ 进行训练，使得**加权训练误差最小化**。基学习器通常选择**弱学习器**，如**决策树桩 (Decision Stump)**，即**单层决策树**。
   b. **计算基学习器权重 (Calculate Base Learner Weight)**：计算基学习器 $h_t$ 在**训练集上的加权错误率** $e_t = P(h_t(\mathbf{x}_i) \ne y_i) = \sum_{i=1}^{N} w_{ti} I(h_t(\mathbf{x}_i) \ne y_i)$。 $e_t$ 表示被基学习器 $h_t$ 误分类的样本的权重之和。如果 $e_t > 0.5$，则停止迭代，因为此时基学习器的性能甚至不如随机猜测。然后计算基学习器 $h_t$ 的**权重** $\alpha_t = \frac{1}{2} \ln(\frac{1-e_t}{e_t})$。当 $e_t$ 越小时，$\alpha_t$ 越大，说明基学习器 $h_t$ 的预测性能越好，权重越高。
   c. **更新样本权重 (Update Sample Weights)**：根据基学习器 $h_t$ 的预测结果**更新样本权重**，**提高误分类样本的权重**，**降低正确分类样本的权重**，使得后续的基学习器更加关注难以分类的样本。样本权重更新公式为：
      $$w_{t+1, i} = \frac{w_{ti}}{Z_t} \times \begin{cases} e^{-\alpha_t}, & \text{if } h_t(\mathbf{x}_i) = y_i \\ e^{\alpha_t}, & \text{if } h_t(\mathbf{x}_i) \ne y_i \end{cases} = \frac{w_{ti}}{Z_t} e^{-\alpha_t y_i h_t(\mathbf{x}_i)}$$
      其中 $Z_t = \sum_{i=1}^{N} w_{ti} e^{-\alpha_t y_i h_t(\mathbf{x}_i)}$ 是**归一化因子 (Normalization Factor)**，使得 $\sum_{i=1}^{N} w_{t+1, i} = 1$，保证样本权重之和为 1。 $y_i \in \{-1, +1\}$ 是样本的真实标签， $h_t(\mathbf{x}_i) \in \{-1, +1\}$ 是基学习器的预测标签。如果样本被正确分类 ($y_i h_t(\mathbf{x}_i) = +1$)，则样本权重乘以 $e^{-\alpha_t} < 1$，权重降低；如果样本被误分类 ($y_i h_t(\mathbf{x}_i) = -1$)，则样本权重乘以 $e^{\alpha_t} > 1$，权重提高。
3. **构建最终模型 (Build Final Model)**：经过 $T$ 轮迭代后，得到 $T$ 个基学习器 $\{h_1, h_2, ..., h_T\}$ 及其对应的权重 $\{\alpha_1, \alpha_2, ..., \alpha_T\}$。**最终模型是基学习器的加权线性组合**：对于新样本 $\mathbf{x}$，最终模型的预测结果为： $H(\mathbf{x}) = \text{sign}(\sum_{t=1}^{T} \alpha_t h_t(\mathbf{x}))$。 $\text{sign}(z)$ 是符号函数，当 $z > 0$ 时，$\text{sign}(z) = +1$；当 $z < 0$ 时，$\text{sign}(z) = -1$；当 $z = 0$ 时，$\text{sign}(z) = 0$ 或 $+1$ 或 $-1$，通常取 $+1$ 或 $-1$。

**梯度提升决策树 (Gradient Boosting Decision Tree, GBDT):**

梯度提升决策树 (Gradient Boosting Decision Tree, GBDT) 是一种非常强大且广泛应用的 **Boosting 算法**，以 **决策树 (Decision Tree)** 为基学习器。GBDT 的核心思想是 **梯度提升 (Gradient Boosting)**，也称为 **梯度下降提升 (Gradient Descent Boosting)**。GBDT 使用 **梯度提升算法**，通过**迭代地训练决策树**来**拟合负梯度残差 (Negative Gradient Residuals)**，**逐步逼近真实的目标函数**。GBDT 可以用于**回归和分类问题**，尤其在**非线性**和**复杂**的预测问题中表现出色。GBDT 是许多高级 Boosting 算法（如 XGBoost、LightGBM、CatBoost）的基础。

**梯度提升 (Gradient Boosting) 的直观解释:**

梯度提升的思想可以理解为**函数空间的梯度下降**。在传统的梯度下降中，我们是在**参数空间**中沿着**负梯度方向**迭代优化参数，以**最小化损失函数**。而在梯度提升中，我们是在**函数空间**中沿着**负梯度方向**迭代优化**模型函数**，以**逼近真实的目标函数**。

**GBDT 拟合负梯度残差的原理:**

GBDT 的**每一轮迭代**都**训练一个新的决策树**，**目标是拟合当前模型预测结果与真实值之间的残差**。更精确地说，GBDT 拟合的是**损失函数的负梯度**，即**残差的某种形式**。通过**不断地拟合残差**，**GBDT 逐步减小模型的预测误差**，**提高模型的预测精度**。

**GBDT 算法流程 (以回归问题为例):**

GBDT 算法流程 (以回归问题为例):

1. **初始化模型 (Initialize Model)**：**初始化一个弱学习器**（例如，**常数模型 (Constant Model)**，即所有样本的预测值都为一个常数） $f_0(\mathbf{x}) = \text{average}(y_i)$。 $f_0(\mathbf{x})$ 是初始模型的预测函数，通常使用训练集样本目标变量的均值作为初始预测值。
2. **迭代训练基学习器 (Iterative Training of Base Learners)**：进行 $T$ 轮迭代， $t = 1, 2, ..., T$：
   a. **计算负梯度残差 (Compute Negative Gradient Residuals)**：对于**每个样本 $i = 1, 2, ..., N$**，计算**负梯度残差** $r_{ti} = y_i - f_{t-1}(\mathbf{x}_i)$。 $f_{t-1}(\mathbf{x}_i)$ 是**前一轮迭代得到的模型 $f_{t-1}$ 对样本 $\mathbf{x}_i$ 的预测值**。 $r_{ti}$ 表示**真实值 $y_i$ 与当前模型预测值 $f_{t-1}(\mathbf{x}_i)$ 之间的差异**，即**模型在样本 $\mathbf{x}_i$ 上的预测误差**。负梯度残差 $r_{ti}$ 可以看作是**本轮迭代需要拟合的目标**，即**模型需要在本轮迭代中学习如何纠正前一轮的预测误差**。
   b. **训练决策树 (Train Decision Tree)**：使用 **$(\mathbf{x}_i, r_{ti})_{i=1}^{N}$ 作为训练数据**，**训练一个决策树 $h_t(\mathbf{x})$**，**拟合负梯度残差 $r_{ti}$**。决策树 $h_t(\mathbf{x})$ 的**叶节点区域** $\{R_{tj}\}_{j=1}^{J_t}$ 将特征空间划分为 $J_t$ 个互不相交的区域， $J_t$ 是决策树 $h_t$ 的叶节点数量。
   c. **确定叶节点区域的输出值 (Determine Leaf Node Output Values)**：对于决策树 $h_t(\mathbf{x})$ 的**每个叶节点区域 $R_{tj}$**，**计算该区域内样本负梯度残差的平均值** $c_{tj} = \text{average}_{\mathbf{x}_i \in R_{tj}} (r_{ti}) = \frac{1}{|R_{tj}|} \sum_{\mathbf{x}_i \in R_{tj}} r_{ti}$。 $c_{tj}$ 是**决策树 $h_t$ 在叶节点区域 $R_{tj}$ 上的预测值**，表示**模型在本轮迭代中需要在区域 $R_{tj}$ 内进行的调整量**。
   d. **更新模型 (Update Model)**：**更新模型** $f_t(\mathbf{x}) = f_{t-1}(\mathbf{x}) + \alpha c_{tj} I(\mathbf{x} \in R_{tj})$，其中 $\alpha$ 是 **学习率 (Learning Rate)**，也称为 **shrinkage 参数**，通常取值范围为 $(0, 1]$，例如 0.1、0.01 等。 $\alpha$ 控制**每个基学习器的步长**，**减小学习率可以降低模型对后续基学习器的依赖程度**，**提高模型的泛化能力**，但**需要更多的迭代次数**。 $I(\mathbf{x} \in R_{tj})$ 是**指示函数**，当样本 $\mathbf{x}$ 属于叶节点区域 $R_{tj}$ 时， $I(\mathbf{x} \in R_{tj}) = 1$，否则 $I(\mathbf{x} \in R_{tj}) = 0$。 $f_t(\mathbf{x})$ 是**本轮迭代更新后的模型**，它是在前一轮模型 $f_{t-1}(\mathbf{x})$ 的基础上，**加上本轮训练的决策树 $h_t(\mathbf{x})$ 的加权结果**，**逐步逼近真实的目标函数**。
3. **得到最终模型 (Obtain Final Model)**：经过 $T$ 轮迭代后，**得到最终的 GBDT 模型** $f_T(\mathbf{x}) = f_0(\mathbf{x}) + \sum_{t=1}^{T} \sum_{j=1}^{J_t} \alpha c_{tj} I(\mathbf{x} \in R_{tj}) = f_0(\mathbf{x}) + \sum_{t=1}^{T} \alpha h_t(\mathbf{x})$。最终模型是**所有基学习器的加权和**。

**GBDT 算法流程 (以分类问题为例):**

GBDT 用于分类问题时，算法流程与回归问题类似，主要区别在于：
- **损失函数不同**：回归问题通常使用**平方误差损失函数 (Squared Error Loss)**，分类问题通常使用**对数似然损失函数 (Log-Likelihood Loss)** 或 **指数损失函数 (Exponential Loss)** 等。
- **负梯度计算不同**：不同损失函数的负梯度计算方式不同。例如，对于二分类问题，如果使用对数似然损失函数，则负梯度残差的计算公式与回归问题不同。
- **叶节点区域的输出值确定方式不同**：分类问题中，叶节点区域的输出值通常**不是负梯度残差的平均值**，而是**根据具体的损失函数和优化目标确定**。例如，对于二分类问题，可以使用**对数几率 (Log Odds)** 或 **类别概率** 作为叶节点输出值。

## 神经网络 (Neural Network)

神经网络 (Neural Network, NN)，更精确地说是**人工神经网络 (Artificial Neural Network, ANN)**，是一种**模拟生物神经系统结构**的**计算模型**，由**大量相互连接的神经元 (Neuron) 组成**。神经网络可以学习**复杂的非线性关系**，具有强大的**模式识别**、**函数逼近**和**自适应能力**。神经网络在**图像识别**、**自然语言处理**、**语音识别**、**金融预测**等领域取得了巨大成功，是**深度学习 (Deep Learning)** 的基础。

**神经网络的核心思想:**

神经网络的核心思想是**模拟生物神经系统的信息处理方式**。生物神经系统由大量的神经元相互连接而成，神经元之间通过**电信号和化学信号**传递信息。神经网络试图**抽象和模拟这种信息传递和处理机制**，通过**构建由大量神经元相互连接的网络结构**，来实现**复杂的信息处理和学习任务**。

**神经网络的优势:**

- **强大的非线性建模能力**：神经网络通过**激活函数的非线性变换**，可以**学习和表示非常复杂的非线性关系**，这是传统线性模型难以实现的。
- **高度的并行分布式计算能力**：神经网络由**大量的神经元并行工作**，可以**高效地处理大规模数据**和**复杂计算任务**。
- **良好的泛化能力**：通过**合理的网络结构设计和训练方法**，神经网络可以**学习到数据中的本质规律**，具有**良好的泛化能力**，在**未见过的数据上也能表现良好**。
- **自适应学习能力**：神经网络可以通过**反向传播算法**等方法，**自动地从数据中学习**，**调整网络参数**，**适应不同的任务和数据**。

### 神经网络模型及算法

**神经元模型 (Neuron Model):**

神经元是神经网络的**基本单元**，也称为 **感知机 (Perceptron)**。一个典型的神经元模型包括以下几个主要组成部分：

- **输入 (Input)**：神经元接收来自**其他神经元**或**外部环境**的**输入信号**。输入信号可以是**数值**、**向量**或**张量**等形式。 例如，对于图像识别任务，输入可以是**图像像素的灰度值**；对于自然语言处理任务，输入可以是**词向量**。
- **权重 (Weight)**：**每个输入连接**都对应一个**权重 $w_{ij}$**，表示**连接的强度**或**重要性**。权重可以是**正数**（兴奋性连接）或**负数**（抑制性连接）。 **权重是神经元学习的关键参数**，通过**调整权重**，神经元可以**选择性地接收和处理不同的输入信号**。
- **偏置 (Bias)**：神经元还接收一个**偏置 $b_i$**，也称为 **阈值 (Threshold)**。偏置是一个**常数**，用于**调整神经元的激活阈值**，使得神经元更容易或更不容易被激活。 **偏置可以看作是神经元的一个自由度**，使得神经元可以**更加灵活地进行激活**。
- **加权求和 (Weighted Summation)**：神经元将**所有输入信号**与**对应的权重**进行**加权求和**，再加上**偏置**，得到**神经元的净输入 (Net Input)** $z_i = \sum_{j} w_{ij} x_j + b_i$。 **净输入 $z_i$ 表示神经元接收到的所有输入信号的综合强度**。
- **激活函数 (Activation Function)**：神经元对**净输入 $z_i$** 进行**非线性变换**，通过**激活函数 $\sigma(\cdot)$** 产生**神经元的输出 (Output)** $a_i = \sigma(z_i) = \sigma(\sum_{j} w_{ij} x_j + b_i)$。**激活函数**是神经网络**实现非线性建模的关键**。 **激活函数引入了非线性因素**，使得神经网络可以**逼近任意复杂的非线性函数**。常用的激活函数包括：
    - **Sigmoid 函数**：$\sigma(z) = \frac{1}{1 + e^{-z}}$，将输入值映射到 $(0, 1)$ 区间，常用于**二分类问题**的输出层。 Sigmoid 函数的输出值可以**解释为概率**，例如样本属于正类的概率。
    - **Tanh 函数 (Hyperbolic Tangent Function)**：$\tanh(z) = \frac{e^z - e^{-z}}{e^z + e^{-z}} = 2\sigma(2z) - 1$，将输入值映射到 $(-1, 1)$ 区间，与 Sigmoid 函数类似，但输出范围不同。 Tanh 函数的输出值**以 0 为中心**，可能在某些情况下**比 Sigmoid 函数更易于训练**。
    - **ReLU 函数 (Rectified Linear Unit)**：$\text{ReLU}(z) = \max(0, z)$，当输入值大于 0 时，输出值等于输入值；当输入值小于等于 0 时，输出值为 0。ReLU 函数**计算简单**，**收敛速度快**，是**深度神经网络中最常用的激活函数之一**。 ReLU 函数在**正区间是线性函数**，**负区间是常数 0**，这种**简单的非线性**使其在**深度网络中表现出色**。
    - **Leaky ReLU 函数 (Leaky Rectified Linear Unit)**：$\text{Leaky ReLU}(z) = \begin{cases} z, & \text{if } z > 0 \\ \alpha z, & \text{if } z \le 0 \end{cases}$，其中 $\alpha$ 是一个**很小的常数**，例如 0.01。Leaky ReLU 函数**解决了 ReLU 函数在输入值为负数时输出值为 0 导致神经元 "死亡" 的问题**。 Leaky ReLU 函数在**负区间也保持一定的梯度**，有助于**信息在网络中更好地传播**。
    - **ELU 函数 (Exponential Linear Unit)**：$\text{ELU}(z) = \begin{cases} z, & \text{if } z > 0 \\ \alpha (e^z - 1), & \text{if } z \le 0 \end{cases}$，其中 $\alpha$ 是一个**正的常数**。ELU 函数**具有 ReLU 函数的优点**，同时**在输入值为负数时输出值也具有一定的梯度**，可以**加速神经网络的收敛**。 ELU 函数在**负区间使用指数函数**，可以**提供更平滑的输出**，并**有助于网络的鲁棒性**。
    - **Softmax 函数**：$\text{Softmax}(z_i) = \frac{e^{z_i}}{\sum_{j=1}^{C} e^{z_j}}$，用于**多分类问题**的输出层。Softmax 函数将**一组输入值**映射为**一组概率值**，**每个概率值都在 $(0, 1)$ 区间**，**且所有概率值之和为 1**。 Softmax 函数可以将**神经元的输出转换为类别概率分布**，方便进行**多分类任务**。

- **输出 (Output)**：神经元的**输出信号 $a_i$**，可以作为**其他神经元的输入**，或作为**整个神经网络的输出**。 **神经元的输出是经过激活函数处理后的结果**，可以**传递给下一层神经元**，或者**作为最终的预测结果**。

**多层神经网络 (Multilayer Neural Network, MLNN) / 多层感知机 (Multilayer Perceptron, MLP):**

多层神经网络 (Multilayer Neural Network, MLNN) 或 多层感知机 (Multilayer Perceptron, MLP) 是由**多个神经元层**相互连接而成的神经网络。多层神经网络通常包括以下几种类型的层：

- **输入层 (Input Layer)**：**接收外部输入数据**。输入层的神经元**不进行任何计算**，只是**将输入数据传递给下一层**。输入层神经元的数量**等于输入特征的维度**。 例如，如果输入是 28x28 的图像，则输入层通常有 784 个神经元（将图像展平成向量）。
- **隐藏层 (Hidden Layer)**：**位于输入层和输出层之间**，可以有**一层或多层**。隐藏层是神经网络的**核心部分**，负责**提取输入数据的特征**，**学习输入数据中的复杂模式**。隐藏层神经元的数量和层数是神经网络的**超参数**，需要根据具体问题进行设计和调整。 **隐藏层越多，网络可以学习到的特征就越抽象、越复杂**。
- **输出层 (Output Layer)**：**产生最终的输出结果**。输出层神经元的数量**取决于具体的任务类型**。例如，**二分类问题**的输出层通常**只有一个神经元**，使用 **Sigmoid 激活函数**，输出样本属于正类的概率；**多分类问题**的输出层通常**有 $C$ 个神经元**（$C$ 是类别数量），使用 **Softmax 激活函数**，输出样本属于每个类别的概率；**回归问题**的输出层通常**只有一个神经元**，**不使用激活函数**或使用 **线性激活函数**，直接输出预测值。

**深度神经网络 (Deep Neural Network, DNN)** 指的是**具有多个隐藏层的神经网络**。 "深度" 指的是**网络结构的深度**，即**隐藏层的层数**。 深度神经网络可以**学习到更加抽象和层次化的特征表示**，从而**更好地处理复杂的数据和任务**。

**全连接神经网络 (Fully Connected Neural Network, FCNN) / 稠密神经网络 (Dense Neural Network):**

在多层神经网络中，**相邻层之间**的神经元通常采用 **全连接 (Fully Connected)** 的方式进行连接，即**前一层的每个神经元都与后一层的所有神经元连接**。这种连接方式的神经网络称为 **全连接神经网络 (Fully Connected Neural Network, FCNN)** 或 **稠密神经网络 (Dense Neural Network)**。全连接神经网络是**最基本的神经网络结构**，也是许多复杂神经网络的基础。

**前向传播 (Forward Propagation):**

前向传播 (Forward Propagation) 是指**输入信号从输入层经过隐藏层逐层传递到输出层的过程**。在前向传播过程中，**每一层的神经元接收来自前一层的输出**，进行**加权求和**和**激活函数处理**，然后将**输出传递给下一层**。通过逐层传递和计算，最终得到**输出层的输出**，即**神经网络的预测结果**。

**前向传播的计算步骤:**

1. **输入层**：将**输入数据**输入到输入层神经元。
2. **隐藏层**：对于**每个隐藏层**，**依次计算每个神经元的输出**。计算过程包括：
   - **加权求和**：将**前一层所有神经元的输出**与**连接权重**相乘，并**加上偏置**，得到**净输入**。
   - **激活函数**：将**净输入**通过**激活函数**进行**非线性变换**，得到**神经元的输出**。
3. **输出层**：**计算输出层每个神经元的输出**，计算过程与隐藏层类似。**输出层神经元的输出**即为**神经网络的最终预测结果**。

**反向传播算法 (Backpropagation, BP):**

反向传播算法 (Backpropagation, BP) 是**训练多层神经网络最常用和最核心的算法**。BP 算法是一种**基于梯度下降法 (Gradient Descent)** 的**误差反向传播算法**，通过**计算损失函数 (Loss Function) 对网络参数（权重和偏置）的梯度**，然后**沿着梯度反方向更新参数**，**迭代地最小化损失函数**，从而**学习到最优的网络参数**。BP 算法实现了**误差信号从输出层反向传播到输入层**，**逐层调整网络参数**，使得神经网络能够**学习到输入数据中的复杂模式**。

**梯度下降法 (Gradient Descent) 的直观解释:**

梯度下降法就像是**在山坡上寻找山谷最低点**的过程。

1. **确定当前位置**（对应于**当前的参数值**）。
2. **沿着当前位置最陡峭的方向（负梯度方向）**向下走一步（**更新参数**）。
3. **重复步骤 2**，直到**到达山谷最低点**（**损失函数达到最小值**）。

**反向传播算法的步骤:**

1. **前向传播 (Forward Propagation)**：**给定输入样本 $(\mathbf{x}_i, y_i)$**，**计算每个样本的前向传播输出**，**得到神经网络的预测值 $\hat{y}_i$**。前向传播过程是从输入层开始，逐层计算每个神经元的输出，直到输出层。
2. **计算损失 (Compute Loss)**：**根据预测值 $\hat{y}_i$ 和真实值 $y_i$**，**计算损失函数值 $L_i = L(\hat{y}_i, y_i)$**。**损失函数**衡量了**模型预测结果与真实值之间的差异**。常用的损失函数包括：
   - **均方误差损失函数 (Mean Squared Error Loss, MSE)**：$L_{MSE}(\hat{y}, y) = \frac{1}{2} (\hat{y} - y)^2$，常用于**回归问题**。
   - **交叉熵损失函数 (Cross-Entropy Loss Function)**：$L_{CE}(\hat{y}, y) = - [y \ln \hat{y} + (1-y) \ln (1-\hat{y})]$，常用于**二分类问题**。对于**多分类问题**，可以使用 **多类交叉熵损失函数 (Categorical Cross-Entropy Loss)**。
3. **反向传播误差 (Backpropagate Error)**：**从输出层开始**，**反向计算每一层的误差项 (Error Term) $\delta_l$**。**误差项 $\delta_l$ 反映了第 $l$ 层神经元的输出对最终损失的影响程度**，是**损失函数关于第 $l$ 层神经元净输入 $z_l$ 的梯度**。误差项的计算公式为：
   - **输出层误差项**：$\delta_{output} = \frac{\partial L}{\partial z_{output}} = \frac{\partial L}{\partial a_{output}} \odot \sigma'_{output}(z_{output})$，其中 $\odot$ 表示**逐元素乘积 (Element-wise Product)**，$\sigma'_{output}(z_{output})$ 是输出层激活函数 $\sigma_{output}$ 对净输入 $z_{output}$ 的导数。
   - **隐藏层误差项**：$\delta_l = \frac{\partial L}{\partial z_l} = (\mathbf{W}_{l+1}^T \delta_{l+1}) \odot \sigma'_{l}(z_{l})$，其中 $\mathbf{W}_{l+1}$ 是第 $l$ 层到第 $l+1$ 层的**权重矩阵**，$\delta_{l+1}$ 是第 $l+1$ 层的误差项，$\sigma'_{l}(z_{l})$ 是第 $l$ 层激活函数 $\sigma_{l}$ 对净输入 $z_{l}$ 的导数。误差项的计算是**从输出层向输入层逐层反向传播**的。
4. **计算梯度 (Compute Gradients)**：**根据误差项 $\delta_l$**，**计算损失函数关于每一层权重 $\mathbf{W}_l$ 和偏置 $\mathbf{b}_l$ 的梯度**。梯度的计算公式为：
   - **权重梯度**：$\frac{\partial L}{\partial \mathbf{W}_l} = \delta_l \mathbf{a}_{l-1}^T$，其中 $\mathbf{a}_{l-1}$ 是第 $l-1$ 层的输出（对于输入层，$\mathbf{a}_0 = \mathbf{x}$）。
   - **偏置梯度**：$\frac{\partial L}{\partial \mathbf{b}_l} = \delta_l$。
5. **更新参数 (Update Parameters)**：**沿着梯度反方向更新权重 $\mathbf{W}_l$ 和偏置 $\mathbf{b}_l$**，**最小化损失函数**。参数更新公式为：
   - **权重更新**：$\mathbf{W}_l = \mathbf{W}_l - \alpha \frac{\partial L}{\partial \mathbf{W}_l} = \mathbf{W}_l - \alpha \delta_l \mathbf{a}_{l-1}^T$
   - **偏置更新**：$\mathbf{b}_l = \mathbf{b}_l - \alpha \frac{\partial L}{\partial \mathbf{b}_l} = \mathbf{b}_l - \alpha \delta_l$
   其中 $\alpha$ 是 **学习率 (Learning Rate)**，控制参数更新的步长。
6. **迭代 (Iteration)**：**重复步骤 1-5**，**遍历所有训练样本**（或**一个批次的样本**），**进行多轮迭代 (Epoch)**，直到**损失函数收敛**或**达到预设的迭代次数**。

### 深度学习 (Deep Learning)

**深度学习 (Deep Learning)** 是**机器学习的一个分支**，**本质上就是具有多层隐藏层的神经网络**。 深度学习通过**构建深层神经网络**，**学习数据中更加抽象和复杂的特征表示**，从而**解决更加复杂的任务**。 深度学习在**图像识别**、**自然语言处理**、**语音识别**等领域取得了突破性进展，**推动了人工智能的快速发展**。

**深度学习的关键要素:**

- **深层神经网络结构**：深度学习模型通常具有**多个隐藏层**，可以**学习到多层次的特征表示**。
- **大规模数据集**：深度学习模型通常需要**大规模的数据集进行训练**，才能**充分发挥其性能**。
- **强大的计算能力**：深度学习模型的训练通常需要**大量的计算资源**，例如 **GPU (图形处理器)**。
- **高效的优化算法**：深度学习模型的训练需要**高效的优化算法**，例如 **Adam**、**SGD with Momentum** 等。

**神经网络的变体模型 (Variations of Neural Networks):**

随着深度学习的发展，研究者们提出了各种各样的神经网络变体模型，以适应不同的任务和数据类型。以下是一些常见的神经网络变体模型：

- **卷积神经网络 (Convolutional Neural Network, CNN)**：
    - **特点**：CNN 是一种**专门用于处理图像数据**的神经网络。CNN 的核心组件是**卷积层 (Convolutional Layer)** 和 **池化层 (Pooling Layer)**。**卷积层**可以**自动学习图像中的局部特征**，例如边缘、纹理等。**池化层**可以**降低特征图的维度**，**减少计算量**，并**提高模型的鲁棒性**。
    - **应用场景**：图像分类、目标检测、图像分割、人脸识别等**计算机视觉任务**。
- **循环神经网络 (Recurrent Neural Network, RNN)**：
    - **特点**：RNN 是一种**专门用于处理序列数据**的神经网络。RNN 的特点是**具有循环连接**，使得网络可以**记忆之前的输入信息**，并**应用于当前的输出**。
    - **应用场景**：自然语言处理 (如文本分类、机器翻译、文本生成)、语音识别、时间序列预测等**序列数据处理任务**。
    - **常见变体**：**长短期记忆网络 (Long Short-Term Memory Network, LSTM)** 和 **门控循环单元网络 (Gated Recurrent Unit Network, GRU)**，它们**解决了传统 RNN 在长序列数据中容易出现的梯度消失和梯度爆炸问题**。
- **Transformer 网络**:
    - **特点**：Transformer 是一种**基于自注意力机制 (Self-Attention Mechanism)** 的神经网络结构。Transformer **摒弃了传统的 RNN 结构**，**完全依赖自注意力机制来捕捉输入序列中不同位置之间的关系**。Transformer 具有**并行计算能力强**、**可以捕捉长距离依赖关系**等优点。
    - **应用场景**：自然语言处理 (如机器翻译、文本摘要、问答系统)、图像识别、语音识别等**各种序列数据处理任务**。
    - **重要模型**：**BERT (Bidirectional Encoder Representations from Transformers)**、**GPT (Generative Pre-trained Transformer)** 等**预训练语言模型**，在自然语言处理领域取得了革命性的进展。
- **图神经网络 (Graph Neural Network, GNN)**：
    - **特点**：GNN 是一种**专门用于处理图结构数据**的神经网络。GNN 可以**学习图中节点和边的特征表示**，并**进行节点分类、链接预测、图分类等任务**。
    - **应用场景**：社交网络分析、知识图谱、推荐系统、生物信息学等**图结构数据分析任务**。
- **生成对抗网络 (Generative Adversarial Network, GAN)**：
    - **特点**：GAN 是一种**生成模型**，由**生成器 (Generator)** 和 **判别器 (Discriminator)** 两个神经网络组成。**生成器**负责**生成假数据**，**判别器**负责**区分真假数据**。**两个网络相互对抗训练**，**最终生成器可以生成逼真的数据**。
    - **应用场景**：图像生成、图像编辑、数据增强、风格迁移等**生成式任务**。
- **自编码器 (Autoencoder, AE)**：
    - **特点**：自编码器 是一种**无监督学习模型**，用于**学习数据的低维表示 (特征)**。自编码器由**编码器 (Encoder)** 和 **解码器 (Decoder)** 两个神经网络组成。**编码器**将输入数据**压缩到低维空间**，**解码器**将低维表示**重构回原始数据**。
    - **应用场景**：特征提取、降维、数据去噪、异常检测等**无监督学习任务**。
    - **常见变体**：**变分自编码器 (Variational Autoencoder, VAE)**、**稀疏自编码器 (Sparse Autoencoder)**、**降噪自编码器 (Denoising Autoencoder)** 等。

总而言之，神经网络和深度学习是当前机器学习领域最热门和最重要的方向之一。 掌握神经网络的基本原理和常用模型，对于理解和应用人工智能技术至关重要。

## 总结

本讲义深入探讨了集成学习和神经网络模型，主要内容包括：

* **集成学习**: 详细介绍了 Bagging 和 Boosting 两种主要的集成学习方法，以及随机森林和 AdaBoost 算法的原理和特点。
* **神经网络**: 系统讲解了神经网络的基本结构、前向传播、反向传播算法以及深度学习的概念。
* **深度学习变体模型**: 简要介绍了卷积神经网络 (CNN)、循环神经网络 (RNN)、Transformer 网络、图神经网络 (GNN) 和生成对抗网络 (GAN) 等深度学习模型的特点和应用场景。
