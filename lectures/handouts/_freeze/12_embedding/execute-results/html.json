{
  "hash": "72dd37e8cf1dcfab8fa9b9508b353ca7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"文本分析2：词向量与深度学习基础\"\n---\n\n\n\n\n\n\n# 从稀疏到密集表示\n\n## Bag of Words模型的局限性\n\n上一讲中，我们学习了词袋模型（Bag of Words）和TF-IDF，这些是文本分析的基础方法。然而，这些方法存在明显局限性：\n\n1. **丢失词序信息**：词袋模型完全忽略词语出现的顺序。例如\"政府调控房价\"和\"房价调控政府\"在词袋表示中是完全相同的\n   \n2. **语义鸿沟问题**：无法捕捉词与词之间的语义关系，如同义词、上下位词等\n   \n3. **维度灾难**：高维稀疏向量（维度等于词汇量大小）导致计算效率低下\n   \n4. **未登录词问题**：无法处理训练集中未出现过的词语\n\n词袋模型的这些局限性促使研究者寻找更先进的文本表示方法，词向量（Word Embedding）正是这一探索的重要成果。\n\n## 词向量的直觉理解\n\n**词向量**（Word Embedding）是将词语映射到一个低维稠密实数向量空间的技术，通常维度在50-300之间。与词袋模型不同，词向量具有以下特点：\n\n1. **稠密表示**：向量中的每个维度都有非零值\n2. **语义编码**：向量的不同维度隐含地编码了词语的语义特征\n3. **相似性可计算**：语义相近的词在向量空间中距离较近\n\n例如，\"银行\"和\"金融\"在向量空间中距离较近，而\"银行\"和\"蔬菜\"则距离较远。\n\n## 分布式假设：词向量的理论基础\n\n词向量背后的核心理论是**分布式假设**（Distributional Hypothesis），这一理论由语言学家J.R. Firth在1957年提出：\n\n> \"You shall know a word by the company it keeps.\"（一个词的含义取决于它的伙伴词）\n\n这一假设认为：**上下文相似的词，其语义也相似**。例如，\"银行\"和\"金融机构\"经常出现在相似的上下文中，因此它们可能具有相似的语义。\n\n基于分布式假设，词向量学习的核心任务可以归纳为：学习一个映射函数，使得在语料库中上下文相似的词在向量空间中的位置也相近。\n\n## 密集表示的数学性质\n\n从数学角度看，密集表示的优势在于：\n\n1. **降维性**：从稀疏高维空间（词汇量大小，如5万维）降至低维空间（如300维）\n2. **连续性**：连续向量空间允许进行向量代数运算，如类比推理\n3. **泛化能力**：能够更好地泛化到未见过的例子\n\n数学上，稀疏向量与密集向量的对比如下：\n\n- **稀疏向量**（Sparse Vector）：$\\mathbf{v} = [0, 0, 1, 0, ..., 0, 2, 0]$，大多数元素为0\n- **密集向量**（Dense Vector）：$\\mathbf{v} = [0.2, -0.6, 0.5, 0.9, ..., -0.1, 0.3]$，大多数元素非0\n\n稠密向量表示的直观优势可以通过一个简单的类比来理解：假设我们要描述一个人，可以使用二元特征（是/否问题，对应稀疏表示）如\"是否戴眼镜\"、\"是否有胡子\"等，也可以使用连续特征（对应稠密表示）如身高、体重、年龄等。连续特征通常能更精确、更紧凑地描述对象。\n\n# Word2Vec原理讲解\n\n## Word2Vec简介\n\n**Word2Vec**是Mikolov等人于2013年提出的一种高效学习词向量的方法，它通过浅层神经网络从大规模语料库中学习词语的分布式表示。Word2Vec迅速成为NLP领域的里程碑技术，为后续深度学习在NLP中的应用奠定了基础。\n\nWord2Vec的核心思想是：**通过预测上下文中的词来学习词语的向量表示**。基于这一思想，Word2Vec提出了两种模型：\n\n1. **Skip-gram模型**：预测上下文词\n2. **CBOW（Continuous Bag of Words）模型**：预测目标词\n\n## Skip-gram模型详解\n\nSkip-gram模型的目标是：**给定中心词，预测其上下文词**。\n\n### 模型结构\n\nSkip-gram模型的网络结构如下：\n\n1. **输入层**：中心词的one-hot编码，维度为词汇量大小$|V|$\n2. **隐藏层**：不含激活函数的全连接层，维度为词向量维度$d$\n3. **输出层**：预测上下文词概率的softmax层，维度为词汇量大小$|V|$\n\n其数学表示为：\n\n$$p(w_o|w_i) = \\frac{\\exp(v_{w_o}^{\\prime T} \\cdot v_{w_i})}{\\sum_{w=1}^{|V|} \\exp(v_w^{\\prime T} \\cdot v_{w_i})}$$\n\n其中：\n- $w_i$是中心词\n- $w_o$是上下文词\n- $v_{w_i}$是中心词的词向量（输入向量）\n- $v_{w_o}^{\\prime}$是上下文词的词向量（输出向量）\n- $|V|$是词汇表大小\n\n### 训练过程\n\nSkip-gram模型的训练过程如下：\n\n1. 从语料库中抽取中心词$w_i$及其上下文窗口内的词$w_o$\n2. 最大化预测上下文词的条件概率$p(w_o|w_i)$\n3. 对所有词对$(w_i, w_o)$，优化目标函数：\n\n$$J(\\theta) = \\frac{1}{T}\\sum_{t=1}^{T} \\sum_{-c \\leq j \\leq c, j \\neq 0} \\log p(w_{t+j}|w_t)$$\n\n其中：\n- $T$是语料库中的词数\n- $c$是上下文窗口大小\n- $\\theta$是模型参数\n\n## CBOW模型详解\n\nCBOW（Continuous Bag of Words）模型与Skip-gram相反，其目标是：**给定上下文词，预测中心词**。\n\n### 模型结构\n\nCBOW模型的网络结构如下：\n\n1. **输入层**：多个上下文词的one-hot编码，每个维度为词汇量大小$|V|$\n2. **隐藏层**：不含激活函数的全连接层，维度为词向量维度$d$\n3. **输出层**：预测中心词概率的softmax层，维度为词汇量大小$|V|$\n\nCBOW模型首先对上下文词的向量取平均：\n\n$$\\hat{v} = \\frac{1}{2c} \\sum_{-c \\leq j \\leq c, j \\neq 0} v_{w_{t+j}}$$\n\n然后预测中心词的概率：\n\n$$p(w_t|\\hat{v}) = \\frac{\\exp(v_{w_t}^{\\prime T} \\cdot \\hat{v})}{\\sum_{w=1}^{|V|} \\exp(v_w^{\\prime T} \\cdot \\hat{v})}$$\n\n### Skip-gram与CBOW对比\n\n两种模型各有优缺点：\n\n1. **Skip-gram**:\n   - 更适合小型语料库\n   - 对低频词表现更好\n   - 计算复杂度较高\n\n2. **CBOW**:\n   - 训练速度更快\n   - 对高频词表现更好\n   - 在大型语料库上更稳定\n\n## 负采样（Negative Sampling）技术\n\nWord2Vec的一个主要计算瓶颈是softmax函数，其计算复杂度与词汇量成正比。为解决这一问题，Mikolov等人提出了**负采样**（Negative Sampling）技术。\n\n### 负采样原理\n\n负采样将多分类问题转化为二分类问题：\n\n1. 对于真实的词对$(w_i, w_o)$，将其标记为正样本（标签为1）\n2. 对于每个正样本，随机采样$k$个负样本$(w_i, w_n)$，其中$w_n$是随机词（标签为0）\n3. 使用逻辑回归来判断词对是否真实共现\n\n优化目标变为：\n\n$$J(\\theta) = \\log \\sigma(v_{w_o}^{\\prime T} \\cdot v_{w_i}) + \\sum_{j=1}^{k} \\mathbb{E}_{w_j \\sim P_n(w)} [\\log \\sigma(-v_{w_j}^{\\prime T} \\cdot v_{w_i})]$$\n\n其中：\n- $\\sigma$是sigmoid函数\n- $P_n(w)$是负样本的噪声分布，通常为词频的3/4次方\n\n### 负采样的优势\n\n负采样技术带来的主要优势包括：\n\n1. **计算效率**：将复杂度从$O(|V|)$降至$O(k)$，其中$k \\ll |V|$（通常$k=5-20$）\n2. **稀疏更新**：每次只更新少量词向量，加速收敛\n3. **控制学习难度**：通过调整负样本数量控制任务难度\n\n负采样是Word2Vec能够在大规模语料库上高效训练的关键技术之一。\n\n## 词向量空间的语义特性\n\nWord2Vec训练得到的词向量空间具有丰富的语义特性，这些特性使得词向量成为各种NLP任务的强大特征。\n\n### 语义相关性\n\n相似概念在向量空间中距离较近。例如：\n\n- \"银行\"和\"金融\"距离近\n- \"苹果\"(水果)和\"橙子\"距离近\n- \"苹果\"(公司)和\"微软\"距离近\n\n这种相似性可以通过余弦相似度定量衡量：\n\n$$similarity(w_1, w_2) = \\cos(\\theta) = \\frac{v_{w_1} \\cdot v_{w_2}}{||v_{w_1}|| \\cdot ||v_{w_2}||}$$\n\n### 语义计算\n\n词向量空间中最令人惊讶的特性是支持向量代数运算，可以进行\"语义计算\"：\n\n$$v(\\text{\"king\"}) - v(\\text{\"man\"}) + v(\\text{\"woman\"}) \\approx v(\\text{\"queen\"})$$\n\n这意味着我们可以通过向量运算回答类比问题：\"man之于woman，相当于king之于什么？\"\n\n其他例子包括：\n- $v(\\text{\"中国\"}) - v(\\text{\"北京\"}) + v(\\text{\"法国\"}) \\approx v(\\text{\"巴黎\"})$\n- $v(\\text{\"比特币\"}) - v(\\text{\"数字\"}) + v(\\text{\"实物\"}) \\approx v(\\text{\"黄金\"})$\n\n这些语义运算的存在表明词向量确实捕获了复杂的语义关系，而非简单的共现统计。\n\n# 金融文本中应用Word2Vec\n\n## 金融领域的词向量应用\n\n在金融领域，词向量技术已被广泛应用于多种任务：\n\n1. **情感分析**：分析金融新闻、社交媒体对市场情绪的影响\n2. **风险评估**：从文本数据中提取风险信号\n3. **主题发现**：自动识别财经报道中的热点话题\n4. **市场预测**：结合文本特征进行市场走势预测\n\n金融文本的特殊性（专业术语多、实体关系复杂）使得通用词向量模型可能表现不佳，因此针对金融领域训练的词向量至关重要。\n\n## 训练金融领域词向量\n\n以下我们将使用政府工作报告和其他财经语料训练Word2Vec模型，展示其在金融领域的应用。\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport jieba\nfrom gensim.models import Word2Vec\nimport re\n\n# 加载政府工作报告数据\ngovreport = pd.read_csv(\"labs/NLP/data/govreport.csv\")\n\n# 设置中文显示\nplt.rcParams['font.sans-serif'] = ['Songti SC']  # 用来正常显示中文标签\nplt.rcParams['axes.unicode_minus'] = False  # 用来正常显示负号\n\n# 加载停用词\nwith open(\"labs/NLP/data/ChineseStopWords.txt\", 'r', encoding='utf-8') as f:\n    stop_words = {line.strip() for line in f}\n\n# 文本清洗并分词\ndef preprocess_text(text):\n    # 去除标点符号和数字\n    text = re.sub(r'[^\\u4e00-\\u9fa5]', ' ', text)\n    # 分词\n    words = jieba.cut(text)\n    # 去除停用词和空白\n    return [word for word in words if word.strip() and word not in stop_words]\n\n# 处理所有文档\ncorpus = []\nfor _, row in govreport.iterrows():\n    words = preprocess_text(row['texts'])\n    corpus.append(words)\n\nprint(f\"语料库包含{len(corpus)}篇文档\")\n```\n:::\n\n\n\n\n### 训练Word2Vec模型\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# 训练Word2Vec模型\nmodel = Word2Vec(\n    sentences=corpus,\n    vector_size=100,  # 词向量维度\n    window=5,         # 上下文窗口大小\n    min_count=5,      # 忽略低频词的阈值\n    sg=1,             # 使用Skip-gram模型\n    negative=5,       # 负采样数量\n    epochs=10,        # 训练轮数\n    seed=42\n)\n\n# 保存模型\nmodel.save(\"gov_report_word2vec.model\")\n\n# 查看词汇量\nprint(f\"模型包含{len(model.wv)}个词语\")\n\n# 查看一些词向量示例\nprint(\"'经济'的词向量:\")\nprint(model.wv['经济'])\n```\n:::\n\n\n\n\n### 探索词向量空间\n\n通过查找最相似的词，我们可以验证词向量空间是否捕捉到了金融语义：\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# 查找与\"经济\"最相似的词\nsimilar_words = model.wv.most_similar('经济', topn=10)\nprint(\"与'经济'最相似的词:\")\nfor word, similarity in similar_words:\n    print(f\"{word}: {similarity:.4f}\")\n\n# 查找更多词的相似词\nfor query in ['金融', '创新', '改革', '发展']:\n    print(f\"\\n与'{query}'最相似的词:\")\n    for word, similarity in model.wv.most_similar(query, topn=5):\n        print(f\"{word}: {similarity:.4f}\")\n```\n:::\n\n\n\n\n### 词向量的语义运算\n\n我们可以尝试在金融词向量空间中进行语义运算：\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# 词向量运算示例\ntry:\n    result = model.wv.most_similar(\n        positive=['改革', '创新'],\n        negative=['传统'],\n        topn=5\n    )\n    print(\"\\n'改革'+'创新'-'传统'的结果:\")\n    for word, similarity in result:\n        print(f\"{word}: {similarity:.4f}\")\nexcept KeyError as e:\n    print(f\"词汇不在模型中: {e}\")\n```\n:::\n\n\n\n\n## 可视化词向量空间\n\n由于词向量通常是高维的（如100维），无法直接可视化。我们需要使用降维技术将其映射到2D空间：\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom sklearn.manifold import TSNE\nimport matplotlib.pyplot as plt\n\n# 选择一些重要的金融和经济词汇\nkey_words = []\nfor word in ['经济', '金融', '改革', '创新', '发展', '企业', '市场', '投资', \n             '消费', '增长', '就业', '收入', '债务', '减税', '风险', '数字', \n             '科技', '产业', '结构', '调控', '开放', '政策', '监管', '服务',\n             '银行', '证券', '保险', '互联网', '环保', '低碳']:\n    if word in model.wv:\n        key_words.append(word)\n\n# 获取这些词的向量\nword_vectors = [model.wv[word] for word in key_words]\n\n# 使用t-SNE降维到2D\ntsne = TSNE(n_components=2, random_state=42, perplexity=5)\nembeddings_2d = tsne.fit_transform(word_vectors)\n\n# 可视化\nplt.figure(figsize=(12, 10))\nplt.scatter(embeddings_2d[:, 0], embeddings_2d[:, 1], alpha=0)\n\n# 添加词语标签\nfor i, word in enumerate(key_words):\n    plt.annotate(word, xy=(embeddings_2d[i, 0], embeddings_2d[i, 1]), \n                 fontsize=12, alpha=0.8)\n\nplt.title('金融经济词汇的词向量空间可视化')\nplt.grid(True, linestyle='--', alpha=0.5)\nplt.tight_layout()\nplt.show()\n```\n:::\n\n\n\n\n## 实战案例：政策热点分析\n\n我们可以结合词向量技术分析政府工作报告中的政策热点演变：\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# 以几个关键政策词为中心，分析其在不同年份报告中的语义环境\nfocus_words = ['创新', '改革', '开放', '就业', '风险']\n\n# 为每个年份创建一个语义环境分析\nyears = sorted(govreport['Year'].unique())\nsemantic_evolution = {}\n\n# 对每个焦点词，分析其在各年份报告中的最相似词\nfor focus in focus_words:\n    if focus not in model.wv:\n        continue\n        \n    print(f\"\\n'{focus}'的语义演变:\")\n    # 获取最相似的10个词\n    similar_words = [word for word, _ in model.wv.most_similar(focus, topn=10)]\n    \n    # 查看这些词在各年份报告中的频率\n    for year in years:\n        year_text = govreport[govreport['Year'] == year]['texts'].iloc[0]\n        year_words = preprocess_text(year_text)\n        \n        # 计算焦点词及相似词在该年报告中的出现次数\n        focus_count = year_words.count(focus)\n        similar_counts = {word: year_words.count(word) for word in similar_words}\n        \n        # 排序并展示前5个高频相似词\n        top_similar = sorted(similar_counts.items(), key=lambda x: x[1], reverse=True)[:5]\n        \n        if focus_count > 0:\n            print(f\"{year}年 - '{focus}'出现{focus_count}次，相关词:\")\n            for word, count in top_similar:\n                if count > 0:\n                    print(f\"  {word}: {count}次\")\n```\n:::\n\n\n\n\n## 与其他NLP模型的集成\n\n词向量作为特征可以与各种机器学习模型集成，用于更复杂的NLP任务：\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nimport numpy as np\n\n# 示例：使用词向量增强TF-IDF特征进行分类任务\n# (本例为概念演示，实际应用需要真实标签)\n\n# 为演示目的，我们假设2015-2019年为一类，2020-2023年为另一类\ngovreport['label'] = govreport['Year'].apply(lambda x: 1 if x >= 2020 else 0)\n\n# 构建文档向量（简单方法：词向量的平均）\ndef document_vector(doc):\n    # 分词并过滤\n    words = preprocess_text(doc)\n    # 只考虑模型中有的词\n    words = [word for word in words if word in model.wv]\n    if len(words) == 0:\n        return np.zeros(model.vector_size)\n    # 计算词向量的平均\n    return np.mean([model.wv[word] for word in words], axis=0)\n\n# 为每个文档创建向量表示\nX = np.array([document_vector(text) for text in govreport['texts']])\ny = govreport['label'].values\n\n# 简单训练分类器（实际应用中应使用交叉验证）\nclf = RandomForestClassifier(random_state=42)\nclf.fit(X, y)\n\n# 查看特征重要性\nfeature_importances = clf.feature_importances_\nprint(\"\\n词向量特征的重要性分布:\")\nplt.figure(figsize=(10, 6))\nplt.hist(feature_importances, bins=20)\nplt.title('词向量特征重要性分布')\nplt.xlabel('特征重要性')\nplt.ylabel('特征数量')\nplt.show()\n\n# 预测（为演示使用训练集，实际应用需要独立测试集）\ny_pred = clf.predict(X)\nprint(\"\\n分类性能：\")\nprint(f\"准确率: {metrics.accuracy_score(y, y_pred):.4f}\")\nprint(f\"F1得分: {metrics.f1_score(y, y_pred):.4f}\")\n```\n:::\n\n\n\n\n# 预训练词向量模型比较与应用\n\n在实际应用中，我们通常可以选择使用已有的预训练词向量模型，而不必从头开始训练。这些模型由大型组织或研究机构在海量文本上训练得到，具有更好的通用性和语义表示能力。下面我们将介绍几种常用的预训练词向量模型，并比较它们在不同应用场景下的表现。\n\n## 中文预训练词向量模型\n\n### 1. 腾讯AI Lab词向量（Chinese Word Vectors）\n\n腾讯AI Lab发布的中文词向量是目前应用最广泛的中文预训练词向量之一。\n\n- **训练语料**：由8亿多条句子、超过200亿词汇组成\n- **词汇量**：约800万个词、词组和实体\n- **向量维度**：200维\n- **特点**：覆盖面广，质量高，适用于多领域任务\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# 示例：加载腾讯词向量\nimport gensim\n\n# 下载地址：https://ai.tencent.com/ailab/nlp/en/embedding.html\n# 假设已下载并解压到./data/Tencent_AILab_ChineseEmbedding.txt\ntencent_model = gensim.models.KeyedVectors.load_word2vec_format(\n    './data/Tencent_AILab_ChineseEmbedding.txt', \n    binary=False\n)\n\n# 查找相似词\nprint(\"与'金融'最相似的词:\")\nfor word, similarity in tencent_model.most_similar('金融', topn=5):\n    print(f\"{word}: {similarity:.4f}\")\n```\n:::\n\n\n\n\n### 2. 哈工大/讯飞联合实验室词向量（HIT-SCIR Chinese Word Vectors）\n\n- **训练语料**：人民日报语料库和其他新闻语料\n- **词汇量**：约100万个词\n- **向量维度**：300维\n- **特点**：对专业术语和实体识别有较好的表现\n\n### 3. 百度百科词向量（Baidu Encyclopedia Word Vectors）\n\n- **训练语料**：基于百度百科的语料\n- **词汇量**：约200万个词\n- **向量维度**：300维\n- **特点**：对百科类内容和常识性知识表示较好\n\n## 英文预训练词向量模型\n\n### 1. Google News词向量\n\n由Google在约1000亿单词的Google News数据集上训练的Word2Vec模型。\n\n- **词汇量**：约300万个词和短语\n- **向量维度**：300维\n- **特点**：通用性强，被广泛应用于英文NLP研究和应用\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# 示例：加载Google News词向量\nfrom gensim.models import KeyedVectors\n\n# 下载地址：https://code.google.com/archive/p/word2vec/\n# 假设已下载并解压到./data/GoogleNews-vectors-negative300.bin\ngoogle_model = KeyedVectors.load_word2vec_format(\n    './data/GoogleNews-vectors-negative300.bin', \n    binary=True\n)\n\n# 查找相似词\nprint(\"与'finance'最相似的词:\")\nfor word, similarity in google_model.most_similar('finance', topn=5):\n    print(f\"{word}: {similarity:.4f}\")\n```\n:::\n\n\n\n\n### 2. GloVe（Global Vectors for Word Representation）\n\n由斯坦福NLP小组开发的词向量模型，训练自维基百科和网络文本。\n\n- **训练语料**：CommonCrawl（840B tokens）、Wikipedia（6B tokens）等\n- **词汇量**：根据语料大小从40万到200万不等\n- **向量维度**：50到300维不等\n- **特点**：结合了全局矩阵分解和局部上下文窗口方法的优点\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# 示例：加载GloVe词向量\nimport numpy as np\n\n# 下载地址：https://nlp.stanford.edu/projects/glove/\n# 假设已下载并解压到./data/glove.6B.300d.txt\ndef load_glove_vectors(file_path):\n    word_vectors = {}\n    with open(file_path, 'r', encoding='utf-8') as f:\n        for line in f:\n            values = line.strip().split()\n            word = values[0]\n            vector = np.array(values[1:], dtype='float32')\n            word_vectors[word] = vector\n    return word_vectors\n\nglove_vectors = load_glove_vectors('./data/glove.6B.300d.txt')\n\n# 计算词相似度（简化版）\ndef cosine_similarity(vec1, vec2):\n    dot = np.dot(vec1, vec2)\n    norm1 = np.linalg.norm(vec1)\n    norm2 = np.linalg.norm(vec2)\n    return dot / (norm1 * norm2)\n\n# 查找相似词（简化版，实际应用中需要更高效的实现）\ndef find_similar_words(word, vectors, topn=5):\n    if word not in vectors:\n        return []\n    target_vector = vectors[word]\n    similarities = []\n    for w, vec in vectors.items():\n        if w != word:\n            sim = cosine_similarity(target_vector, vec)\n            similarities.append((w, sim))\n    return sorted(similarities, key=lambda x: x[1], reverse=True)[:topn]\n\n# 输出与'finance'最相似的词\nsimilar_to_finance = find_similar_words('finance', glove_vectors, 5)\nprint(\"与'finance'最相似的词 (GloVe):\")\nfor word, similarity in similar_to_finance:\n    print(f\"{word}: {similarity:.4f}\")\n```\n:::\n\n\n\n\n### 3. FastText\n\n由Facebook AI Research开发，在维基百科语料上训练。\n\n- **词汇量**：约200万个词\n- **向量维度**：300维\n- **特点**：利用词的子词信息，能更好地处理罕见词和未登录词\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# 示例：加载FastText词向量\nfrom gensim.models.fasttext import FastText\n\n# 下载地址：https://fasttext.cc/docs/en/english-vectors.html\n# 假设已下载并解压到./data/wiki-news-300d-1M.vec\nfasttext_model = KeyedVectors.load_word2vec_format(\n    './data/wiki-news-300d-1M.vec'\n)\n\n# 查找相似词\nprint(\"与'finance'最相似的词 (FastText):\")\nfor word, similarity in fasttext_model.most_similar('finance', topn=5):\n    print(f\"{word}: {similarity:.4f}\")\n```\n:::\n\n\n\n\n## 预训练模型的表现比较\n\n不同预训练词向量模型在各种任务上的表现各有优劣。下面我们将从多个维度对它们进行比较：\n\n### 1. 语义捕捉能力\n\n通过测试几组典型的语义关系来比较不同模型：\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# 语义关系测试：国家-首都\ndef test_capital_country_relation(model, language='en'):\n    if language == 'en':\n        # 英文测试对\n        test_pairs = [\n            ('france', 'paris'),\n            ('germany', 'berlin'),\n            ('japan', 'tokyo'),\n            ('china', 'beijing'),\n            ('italy', 'rome')\n        ]\n    else:\n        # 中文测试对\n        test_pairs = [\n            ('法国', '巴黎'),\n            ('德国', '柏林'),\n            ('日本', '东京'),\n            ('中国', '北京'),\n            ('意大利', '罗马')\n        ]\n    \n    # 测试向量关系\n    for country, capital in test_pairs:\n        try:\n            result = model.most_similar(\n                positive=[capital, 'country' if language == 'en' else '国家'],\n                negative=['capital' if language == 'en' else '首都'],\n                topn=1\n            )\n            print(f\"{capital} : {country} = {result[0][0]} : {result[0][1]:.4f}\")\n        except:\n            print(f\"无法测试 {country}-{capital} 关系\")\n            \n# 测试Google模型（英文）\nprint(\"Google News 词向量的国家-首都关系测试：\")\ntest_capital_country_relation(google_model)\n\n# 测试腾讯模型（中文）\nprint(\"\\n腾讯AI Lab 词向量的国家-首都关系测试：\")\ntest_capital_country_relation(tencent_model, language='zh')\n```\n:::\n\n\n\n\n### 2. 领域适应性\n\n不同模型在特定领域（如金融、医疗、法律等）的表现评估：\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# 金融领域词汇测试\nfinancial_terms_en = ['stock', 'bond', 'market', 'investment', 'risk']\nfinancial_terms_zh = ['股票', '债券', '市场', '投资', '风险']\n\n# 测试英文模型\nprint(\"Google模型在金融领域词汇相似性：\")\nfor term in financial_terms_en:\n    try:\n        similar_words = google_model.most_similar(term, topn=3)\n        print(f\"{term}: {', '.join([f'{w}({s:.2f})' for w, s in similar_words])}\")\n    except:\n        print(f\"{term}: 不在词汇表中\")\n\n# 测试中文模型\nprint(\"\\n腾讯模型在金融领域词汇相似性：\")\nfor term in financial_terms_zh:\n    try:\n        similar_words = tencent_model.most_similar(term, topn=3)\n        print(f\"{term}: {', '.join([f'{w}({s:.2f})' for w, s in similar_words])}\")\n    except:\n        print(f\"{term}: 不在词汇表中\")\n```\n:::\n\n\n\n\n### 3. 处理未登录词能力\n\nFastText由于使用子词信息，对未登录词有独特优势：\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# 测试处理未登录词的能力\noov_words_en = ['cryptocurrencies', 'fintech', 'blockchain']\noov_words_zh = ['区块链', '数字货币', '智能投顾']\n\n# 对于FastText模型，即使词不在训练集中，也能生成向量\ndef test_oov_words(model, words):\n    for word in words:\n        try:\n            vector = model[word]\n            similar_words = model.most_similar(word, topn=3)\n            print(f\"{word}: 在词表中，相似词: {', '.join([w for w, _ in similar_words])}\")\n        except:\n            print(f\"{word}: 不在词表中\")\n\nprint(\"FastText对未登录词的处理能力：\")\ntest_oov_words(fasttext_model, oov_words_en)\n```\n:::\n\n\n\n\n### 4. 多语言词向量对齐\n\n为了支持跨语言应用，可以将不同语言的词向量空间对齐：\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# 跨语言词向量对齐示例（概念演示）\ndef simple_translate(word, en_model, zh_model, en_to_zh_dictionary):\n    \"\"\"简化的跨语言词查找\"\"\"\n    if word in en_to_zh_dictionary:\n        return en_to_zh_dictionary[word]\n    \n    # 获取英文词向量\n    if word not in en_model:\n        return \"未找到英文词\"\n    \n    en_vector = en_model[word]\n    \n    # 在中文词空间中寻找最近的词\n    max_sim = -1\n    best_word = None\n    \n    # 实际应用中需要更高效的实现，这里仅为演示\n    for zh_word in list(zh_model.key_to_index.keys())[:1000]:  # 限制搜索范围\n        zh_vector = zh_model[zh_word]\n        sim = cosine_similarity(en_vector, zh_vector)\n        if sim > max_sim:\n            max_sim = sim\n            best_word = zh_word\n    \n    return best_word if max_sim > 0.5 else \"未找到匹配的中文词\"\n```\n:::\n\n\n\n\n## 预训练模型在不同任务中的选择指南\n\n根据不同应用场景，我们推荐选择的预训练词向量模型：\n\n| 应用场景 | 推荐中文模型 | 推荐英文模型 | 理由 |\n|---------|------------|------------|------|\n| 通用文本分类 | 腾讯AI Lab | GloVe 300d | 覆盖面广，向量维度适中 |\n| 命名实体识别 | 哈工大词向量 | FastText | 对实体名称和罕见词有更好表现 |\n| 情感分析 | 腾讯AI Lab | Google News | 对语义细微差别表现更好 |\n| 专业领域(如金融) | 领域特定模型 | 领域特定模型 | 通用模型对专业术语表示不足 |\n| 处理网络文本 | 搜狗新闻词向量 | FastText | 对网络流行语和新词表现更好 |\n\n## 选择或训练自己的词向量模型\n\n在实际应用中，我们需要根据具体任务和数据特点选择合适的预训练模型或决定是否需要训练自己的模型：\n\n1. **使用预训练模型的情况**：\n   - 数据量有限，无法支持有效训练\n   - 任务是通用领域，预训练模型已足够好\n   - 计算资源有限\n   - 需要快速开发原型系统\n\n2. **训练自己的模型的情况**：\n   - 有大量特定领域的文本数据\n   - 应用领域有特殊术语或表达方式\n   - 现有预训练模型表现不佳\n   - 有足够的计算资源\n\n3. **微调预训练模型的折中方案**：\n   - 从预训练模型开始，用领域数据继续训练\n   - 保留通用语言知识，同时学习领域特定表示\n   - 资源需求适中，效果通常不错\n\n## 结论\n\n预训练词向量模型为NLP任务提供了便捷的起点，无需从头训练就能获得高质量的词语表示。根据我们的测试，腾讯AI Lab词向量和GloVe模型在通用任务中表现最佳，而FastText在处理未登录词方面具有明显优势。\n\n对于金融文本分析，我们建议：如果数据量充足，可以在通用预训练模型基础上，使用金融领域文本进行进一步训练，以获得更符合领域特性的词向量表示；如果资源有限，可以选择腾讯AI Lab等高质量预训练模型作为基础，然后结合任务特点设计适当的特征工程。\n\n# 案例比较：词频法与词向量在政府工作报告分析中的差异\n\n基于上一讲中的政府工作报告分析案例，我们可以直观地比较词频法(Bag of Words/TF-IDF)和词向量(Word2Vec)在相同任务上的表现差异。以下我们在三个具体任务上进行比较分析：文本相似度计算、关键词提取和语义关联发现。\n\n## 相同文本的两种表示方法\n\n首先，让我们回顾两种方法对同一文档的不同表示方式：\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport jieba\nimport re\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom gensim.models import Word2Vec\nimport matplotlib.pyplot as plt\n\n# 加载政府工作报告数据\ngovreport = pd.read_csv(\"labs/NLP/data/govreport.csv\")\n\n# 加载停用词\nwith open(\"labs/NLP/data/ChineseStopWords.txt\", 'r', encoding='utf-8') as f:\n    stop_words = {line.strip() for line in f}\n\n# 文本清洗与分词函数\ndef preprocess_text(text):\n    # 去除标点符号和数字\n    text = re.sub(r'[^\\u4e00-\\u9fa5]', ' ', text)\n    # 分词\n    words = jieba.cut(text)\n    # 去除停用词和空白\n    return [word for word in words if word.strip() and word not in stop_words]\n\n# 处理所有文档\ncorpus = []\ncorpus_raw = []  # 用于TF-IDF\nyears = []\nfor _, row in govreport.iterrows():\n    year = row['Year']\n    text = row['texts']\n    words = preprocess_text(text)\n    corpus.append(words)\n    corpus_raw.append(' '.join(words))\n    years.append(year)\n\n# 1. TF-IDF表示\ntfidf_vectorizer = TfidfVectorizer()\ntfidf_matrix = tfidf_vectorizer.fit_transform(corpus_raw)\ntfidf_feature_names = tfidf_vectorizer.get_feature_names_out()\n\n# 2. Word2Vec表示\nw2v_model = Word2Vec(\n    corpus, \n    vector_size=100,\n    window=5,\n    min_count=2,\n    sg=1,  # 使用Skip-gram\n    epochs=10\n)\n\n# 文档向量化（取平均）\ndef get_doc_vector(doc_words, model):\n    # 过滤不在模型中的词\n    doc_words = [word for word in doc_words if word in model.wv]\n    if len(doc_words) == 0:\n        return np.zeros(model.vector_size)\n    # 计算词向量的平均\n    return np.mean([model.wv[word] for word in doc_words], axis=0)\n\n# 计算每个文档的词向量表示\ndoc_vectors_w2v = [get_doc_vector(doc, w2v_model) for doc in corpus]\n\n# 打印示例\nreport_idx = 2  # 2021年报告\nprint(f\"{years[report_idx]}年政府工作报告的不同表示方法:\")\nprint(\"\\nTF-IDF表示（稀疏向量，只显示前10个非零元素）:\")\ntfidf_vec = tfidf_matrix[report_idx].toarray()[0]\nnonzero_idxs = np.nonzero(tfidf_vec)[0][:10]\nfor idx in nonzero_idxs:\n    print(f\"{tfidf_feature_names[idx]}: {tfidf_vec[idx]:.4f}\")\n\nprint(\"\\nWord2Vec表示（密集向量，显示前10个维度）:\")\nw2v_vec = doc_vectors_w2v[report_idx]\nfor i in range(10):\n    print(f\"维度{i+1}: {w2v_vec[i]:.4f}\")\n```\n:::\n\n\n\n\n## 文本相似度计算比较\n\n词频法和词向量在计算文档相似度时有明显差异：\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# 1. 基于TF-IDF的相似度\ntfidf_similarity = cosine_similarity(tfidf_matrix)\n\n# 2. 基于Word2Vec的相似度\nw2v_similarity = cosine_similarity(doc_vectors_w2v)\n\n# 创建相似度对比DataFrame\nsimilarity_comparison = pd.DataFrame({\n    'Years': years,\n    'TF-IDF Similarity with 2021': tfidf_similarity[2],  # 以2021年为参考\n    'Word2Vec Similarity with 2021': w2v_similarity[2]   # 以2021年为参考\n})\n\n# 打印相似度比较\nprint(\"不同年份与2021年报告的相似度比较:\")\nprint(similarity_comparison)\n\n# 可视化比较\nplt.figure(figsize=(12, 6))\nplt.bar(similarity_comparison['Years'], similarity_comparison['TF-IDF Similarity with 2021'], \n        alpha=0.7, label='TF-IDF相似度')\nplt.bar(similarity_comparison['Years'], similarity_comparison['Word2Vec Similarity with 2021'], \n        alpha=0.7, label='Word2Vec相似度', color='orange')\nplt.axhline(y=1, color='r', linestyle='--', alpha=0.3)  # 2021年与自身对比线\nplt.xlabel('年份')\nplt.ylabel('与2021年报告的相似度')\nplt.title('词频法与词向量的文本相似度比较')\nplt.legend()\nplt.grid(True, linestyle='--', alpha=0.5)\nplt.tight_layout()\n```\n:::\n\n\n\n\n**相似度计算结果分析**:\n\n1. **TF-IDF相似度**：\n   - 基于词汇重叠度，相同词汇出现越多，相似度越高\n   - 对关键词敏感，但没有语义理解\n   - 相似度变化跨度较大，更容易区分文档\n\n2. **Word2Vec相似度**：\n   - 基于语义空间的接近程度，能捕捉同义词和相关概念\n   - 所有文档相似度普遍较高，因为它们都处于相似的语义空间\n   - 变化更平滑，体现语义连续性\n\n例如，即使2020年疫情报告的词汇与其他年份有明显不同，但在Word2Vec中相似度依然较高，因为整体语义主题（政府工作）是相似的。\n\n## 关键词提取比较\n\n两种方法在关键词提取上也有明显不同：\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# 1. TF-IDF关键词提取\ndef get_tfidf_top_words(tfidf_matrix, feature_names, doc_idx, top_n=10):\n    tfidf_vec = tfidf_matrix[doc_idx].toarray()[0]\n    top_idxs = tfidf_vec.argsort()[-top_n:][::-1]\n    return [(feature_names[idx], tfidf_vec[idx]) for idx in top_idxs]\n\n# 2. Word2Vec关键词提取 (基于词向量中心性)\ndef get_w2v_central_words(doc_words, model, top_n=10):\n    # 只考虑模型中有的词\n    doc_words = [w for w in doc_words if w in model.wv]\n    if len(doc_words) == 0:\n        return []\n    \n    # 计算每个词与文档其他词的平均相似度 (中心性)\n    word_centrality = {}\n    for word in doc_words:\n        # 与其他词的相似度之和\n        total_sim = sum(model.wv.similarity(word, other_word) \n                        for other_word in doc_words if other_word != word)\n        # 平均相似度\n        word_centrality[word] = total_sim / (len(doc_words) - 1) if len(doc_words) > 1 else 0\n    \n    # 返回中心性最高的词\n    return sorted(word_centrality.items(), key=lambda x: x[1], reverse=True)[:top_n]\n\n# 比较2023年报告的关键词提取结果\nreport_idx = 4  # 2023年\nprint(f\"{years[report_idx]}年政府工作报告关键词提取比较:\")\n\ntfidf_top_words = get_tfidf_top_words(tfidf_matrix, tfidf_feature_names, report_idx)\nprint(\"\\nTF-IDF提取的关键词:\")\nfor word, score in tfidf_top_words:\n    print(f\"{word}: {score:.4f}\")\n\nw2v_top_words = get_w2v_central_words(corpus[report_idx], w2v_model)\nprint(\"\\nWord2Vec提取的关键词 (基于中心性):\")\nfor word, score in w2v_top_words:\n    print(f\"{word}: {score:.4f}\")\n```\n:::\n\n\n\n\n**关键词提取结果分析**:\n\n1. **TF-IDF关键词**：\n   - 提取文档中特有的、区分度高的词\n   - 往往是该文档特有的专有名词或低频词\n   - 关注\"独特性\"而非\"重要性\"\n\n2. **Word2Vec关键词**：\n   - 提取文档的语义中心词，与其他词语义联系最紧密的词\n   - 往往是文档主题的核心词，且在语义网络中起枢纽作用\n   - 关注\"中心性\"而非\"频率\"或\"独特性\"\n\n例如，TF-IDF可能会提取\"十四五\"这样的特定术语，而Word2Vec可能会提取\"发展\"这样的核心概念词。\n\n## 语义关联发现比较\n\n词频法和词向量在发现词语关联关系上有本质区别：\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# 1. 词频法的共现分析\nfrom collections import Counter\nimport networkx as nx\n\ndef build_cooccurrence_network(corpus, target_words, window_size=5):\n    \"\"\"构建目标词的共现网络\"\"\"\n    cooccur = Counter()\n    \n    for doc in corpus:\n        for i, word in enumerate(doc):\n            if word in target_words:\n                # 获取窗口内的词\n                context = doc[max(0, i-window_size):i] + doc[i+1:min(len(doc), i+window_size+1)]\n                for context_word in context:\n                    if context_word in target_words and context_word != word:\n                        # 记录共现次数\n                        pair = tuple(sorted([word, context_word]))\n                        cooccur[pair] += 1\n    \n    # 创建网络\n    G = nx.Graph()\n    for word in target_words:\n        G.add_node(word)\n    \n    # 添加边和权重\n    for (word1, word2), weight in cooccur.items():\n        if weight > 0:\n            G.add_edge(word1, word2, weight=weight)\n    \n    return G, cooccur\n\n# 2. Word2Vec的语义相似性网络\ndef build_semantic_network(model, target_words, threshold=0.3):\n    \"\"\"构建基于词向量相似度的语义网络\"\"\"\n    G = nx.Graph()\n    \n    # 过滤不在模型中的词\n    valid_words = [w for w in target_words if w in model.wv]\n    \n    for word in valid_words:\n        G.add_node(word)\n    \n    # 添加边和权重\n    for i, word1 in enumerate(valid_words):\n        for word2 in valid_words[i+1:]:\n            similarity = model.wv.similarity(word1, word2)\n            if similarity > threshold:\n                G.add_edge(word1, word2, weight=similarity)\n    \n    return G\n\n# 分析目标词之间的关系\ntarget_words = ['发展', '经济', '创新', '改革', '开放', '就业', '民生', '环保', '科技', '数字']\n\n# 1. 创建共现网络\ncooccur_net, cooccur_counter = build_cooccurrence_network(corpus, target_words)\n\n# 2. 创建语义网络\nsemantic_net = build_semantic_network(w2v_model, target_words)\n\n# 共现矩阵可视化\ncooccur_matrix = np.zeros((len(target_words), len(target_words)))\nfor i, word1 in enumerate(target_words):\n    for j, word2 in enumerate(target_words):\n        if i != j:\n            pair = tuple(sorted([word1, word2]))\n            cooccur_matrix[i, j] = cooccur_counter[pair]\n\n# 语义相似度矩阵\nsemantic_matrix = np.zeros((len(target_words), len(target_words)))\nfor i, word1 in enumerate(target_words):\n    for j, word2 in enumerate(target_words[i+1:], i+1):\n        if word1 in w2v_model.wv and word2 in w2v_model.wv:\n            similarity = w2v_model.wv.similarity(word1, word2)\n            semantic_matrix[i, j] = semantic_matrix[j, i] = similarity\n\n# 可视化比较\nfig, axes = plt.subplots(1, 2, figsize=(15, 6))\n\n# 共现网络热图\nim1 = axes[0].imshow(cooccur_matrix, cmap='Blues')\naxes[0].set_title('词频法：共现关系')\naxes[0].set_xticks(range(len(target_words)))\naxes[0].set_yticks(range(len(target_words)))\naxes[0].set_xticklabels(target_words)\naxes[0].set_yticklabels(target_words)\nplt.colorbar(im1, ax=axes[0], label='共现次数')\n\n# 语义网络热图\nim2 = axes[1].imshow(semantic_matrix, cmap='Reds')\naxes[1].set_title('Word2Vec：语义相似度')\naxes[1].set_xticks(range(len(target_words)))\naxes[1].set_yticks(range(len(target_words)))\naxes[1].set_xticklabels(target_words)\naxes[1].set_yticklabels(target_words)\nplt.colorbar(im2, ax=axes[1], label='余弦相似度')\n\nplt.tight_layout()\nplt.show()\n```\n:::\n\n\n\n\n**语义关联分析结果比较**:\n\n1. **词频法（共现分析）**：\n   - 基于词语在文本中出现的物理距离\n   - 只能发现直接共现的关系，不能泛化\n   - 需要大量文本才能得到可靠的统计结果\n   - 无法发现从未共现但语义相关的词\n\n2. **Word2Vec（语义网络）**：\n   - 基于分布式表示学习的语义空间距离\n   - 能发现间接关联，即使两个词从未共现\n   - 能发现语义层次和类比关系\n   - 受预训练语料的影响大\n\n例如，在政府工作报告中，\"环保\"和\"低碳\"可能很少直接共现，但在Word2Vec的语义空间中会很接近。\n\n## 主题和情感分析的差异\n\n两种方法在主题建模和情感分析上也有明显区别：\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom sklearn.decomposition import LatentDirichletAllocation\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# 1. 基于词频的主题建模 (LDA)\n# 使用词频矩阵\ncv = CountVectorizer()\nbow_matrix = cv.fit_transform(corpus_raw)\nfeature_names = cv.get_feature_names_out()\n\n# LDA模型\nlda = LatentDirichletAllocation(n_components=3, random_state=42)\nlda.fit(bow_matrix)\n\n# 2. 基于Word2Vec的主题聚类\nfrom sklearn.cluster import KMeans\n\n# 对文档向量进行聚类\nkmeans = KMeans(n_clusters=3, random_state=42)\nclusters = kmeans.fit_predict(doc_vectors_w2v)\n\n# 输出LDA主题词\nprint(\"基于词频的LDA主题词:\")\nfor topic_idx, topic in enumerate(lda.components_):\n    print(f\"主题 #{topic_idx+1}:\")\n    top_words = [feature_names[i] for i in topic.argsort()[:-11:-1]]\n    print(\", \".join(top_words))\n\n# 输出Word2Vec聚类中心最近的词\nprint(\"\\nWord2Vec聚类中心最近的词:\")\nfor i in range(3):\n    # 获取聚类中心\n    center = kmeans.cluster_centers_[i]\n    \n    # 找出与中心最接近的词\n    word_dists = []\n    for word in w2v_model.wv.index_to_key:\n        dist = np.linalg.norm(w2v_model.wv[word] - center)\n        word_dists.append((word, dist))\n    \n    top_words = sorted(word_dists, key=lambda x: x[1])[:10]\n    print(f\"聚类 #{i+1}:\")\n    print(\", \".join(word for word, _ in top_words))\n```\n:::\n\n\n\n\n**主题分析结果比较**:\n\n1. **基于词频的LDA**：\n   - 基于词语在文档中的共现统计构建主题\n   - 主题是词语的概率分布，每个词有明确的主题概率\n   - 结果可解释性强，但受制于表面统计\n\n2. **基于Word2Vec的聚类**：\n   - 基于文档在语义空间中的分布进行聚类\n   - 主题体现为语义空间中的区域，边界更加模糊\n   - 能发现更抽象的语义关联，但解释性较弱\n\n## 综合比较与应用建议\n\n通过以上案例比较，我们总结词频法和词向量在政府工作报告分析中的优缺点：\n\n| 比较维度 | 词频法 (Bag of Words/TF-IDF) | 词向量 (Word2Vec) |\n|---------|---------------------------|------------------|\n| 数据表示 | 高维稀疏向量(~万维) | 低维稠密向量(~百维) |\n| 语义捕捉 | 基于表面词频统计，无语义 | 基于分布式假设，有语义 |\n| 计算复杂度 | 低，适合大规模文档 | 中等，训练需要时间 |\n| 内存占用 | 大（稀疏矩阵）| 小（稠密向量）|\n| 新词处理 | 无法处理未见词 | 也无法直接处理(FastText可以) |\n| 相似度计算 | 仅基于词重叠 | 基于语义相似 |\n| 关键词提取 | 偏向特有词 | 偏向中心词 |\n| 语义关联 | 仅能发现共现关系 | 能发现间接语义关联 |\n| 应用场景 | 文档分类、信息检索 | 语义搜索、推荐系统 |\n\n### 应用建议\n\n基于我们对政府工作报告的分析经验，针对不同任务推荐的方法：\n\n1. **文档去重或精确匹配**：使用词频表示\n2. **文档语义检索或推荐**：使用词向量表示\n3. **特有术语或政策提取**：使用TF-IDF方法\n4. **政策主题语义聚类**：使用Word2Vec\n5. **综合分析**：可以同时使用两种方法并结合结果\n\n在实际应用中，选择合适的文本表示方法往往取决于具体任务需求、可用资源和期望的结果特性。词频法和词向量并非互斥，而是互补的分析视角。\n\n# 小结与进阶方向\n\n## 词向量的优缺点\n\n### 优点\n1. **语义丰富**：捕获了词语间的语义关系\n2. **维度可控**：典型地为50-300维，远低于词汇量大小\n3. **泛化能力**：能处理未见过的词组合\n4. **通用性**：可用于各种NLP任务的特征提取\n\n### 局限性\n1. **多义词问题**：无法区分同一个词的不同含义（如\"苹果\"可以是水果或公司）\n2. **上下文依赖**：固定的词向量无法根据上下文调整\n3. **预训练依赖**：需要大量语料预训练\n4. **领域专一性**：通用领域训练的词向量在专业领域效果可能不佳\n\n## 进阶方向\n\n1. **上下文相关的词表示**：如ELMo、BERT等模型能根据上下文动态生成词表示\n2. **多语言词向量**：跨语言的词向量对齐，支持多语言应用\n3. **领域适应**：将通用词向量迁移到特定领域\n4. **可解释性研究**：理解词向量空间的维度含义\n\n## 本讲小结\n\n本讲我们从Bag of Words模型的局限性出发，介绍了词向量的概念、原理和应用：\n\n1. 词向量通过低维稠密向量表示词语，克服了传统方法的局限\n2. Word2Vec通过Skip-gram和CBOW两种模型高效学习词向量\n3. 负采样等技术大幅提高了训练效率\n4. 词向量空间具有丰富的语义特性，支持相似性计算和向量代数运算\n5. 在金融文本分析中，词向量可以发现政策热点、分析语义变化等\n\n",
    "supporting": [
      "12_embedding_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}